# France based on static FPCA
# Set a working directory
setwd("~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/")

#Library
library(freqdom.fda)

packages <- c("generics", "demography", "forecast","fda","fdaoutlier", 
              "rlist", "mrfDepth","ftsa","rainbow")

## Now load or install&load all
package_check <- lapply(
  packages,
  FUN <- function(x) {
    if (!require(x, character.only = TRUE)) {
      install.packages(x, dependencies = TRUE)
      library(x, character.only = TRUE)
    }
  }
)



################################################################################
# Dataset entries
################################################################################
dataset_entries<-readRDS("./Rcodes_paper/dataset_entries/France/dataset_entries.rds")
year = dataset_entries[[1]]
n_year = dataset_entries[[2]]
age = dataset_entries[[3]]
n_age = dataset_entries[[4]]
n_prefectures=dataset_entries[[5]]

# Row partition
part_list = list()
for(ik in 1:n_prefectures) {
  part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)
}

#Column partition
n_populations=2
part_list_c = list()
for(ik in 1:n_populations) {
  part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)
}
################################################################################
# Datasets 
################################################################################
# France
names_states_France <- readRDS("./Rcodes_paper/names_states/France/name_states.rds")
France_male <- readRDS("./Rcodes_paper/datasets/France/France_male.rds")
France_female <- readRDS("./Rcodes_paper/datasets/France/France_female.rds")
all_male<-t(list.cbind(France_male))
all_female<-t(list.cbind(France_female))
################################################################################
#Functional median polish decomposition and residuals
################################################################################
library("ftsa")
Y=cbind(all_male,all_female)
Both<-ftsa::Two_way_median_polish(Y,year,age,n_prefectures,n_populations)
Residuals<- ftsa::Two_way_Residuals(Y,n_prefectures,year,age,n_populations)
Res1=Residuals$residuals1
Res2=Residuals$residuals2
Residuals_<-cbind(Res1,Res2)
# Reconstructed data
RR<-Residuals$rd #Matrix with the original data reconstructed from the FMP decomposition
#  It's the proof of the reconstruction of the residuals. 
Residuals$R #The result should be a vector with two entries TRUE, TRUE.
#Indicating that after adding both deterministic and time-varying components the FTS are recovered.
Fixed_part<-Residuals$Fixed_comp # deterministic components to be added up after forecasting
################################################################################
# Computation of the point forecasts
################################################################################
source("./Point_forecasting_cov.R")

# With a rolling window approach
cl <- makePSOCKcluster(detectCores()-2)
registerDoParallel(cl)
forecasted_curves_triangular_rolling <- foreach(i = 1:n_prefectures, .packages = c("ftsa")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_)
stopCluster(cl)

# With an expanding window approach
# cl <- makePSOCKcluster(detectCores()-2)
# registerDoParallel(cl)
# forecasted_curves_triangular_expanding <- foreach(i = 1:n_prefectures, .packages = c("ftsa")) %dopar% ForecastC_expanding(i,fixed_com=Fixed_part,Residuals_f=Residuals_)
# stopCluster(cl)

# saveRDS(forecasted_curves_triangular_rolling,"forecasted_curves_triangular_rolling_France_new.rds")

####################################################################################
#Compute the error for the point forecasts obtained in the rolling window approach.
####################################################################################
forecasted_curves_triangular_rolling_static_France <- readRDS("./forecasted_curves_triangular_rolling_France_new.rds")
source("./Rcodes_paper/forecast_errors.R")
max_h=10
error_MAPE_male<-matrix(0,nrow=max_h,ncol = n_prefectures)
error_RMSPE_male<-matrix(0,nrow=max_h,ncol = n_prefectures)
error_MAPE_female<-matrix(0,nrow=max_h,ncol = n_prefectures)
error_RMSPE_female<-matrix(0,nrow=max_h,ncol = n_prefectures)
male<-Y[,1:n_age]
female<-Y[,(n_age+1):(2*n_age)]
for (i in 1:n_prefectures) {
  forecasted_pref_male=forecasted_curves_triangular_rolling_static_France[[i]][1:n_age,]
  forecasted_pref_female=forecasted_curves_triangular_rolling_static_France[[i]][(n_age+1):(2*n_age),]
  True_pop_male=t(male[(n_year*i-(max_h-1)):(n_year*i),])
  True_pop_female=t(female[(n_year*i-(max_h-1)):(n_year*i),])
  for (j in 1:max_h) {
    error_MAPE_male[j,i]<-mape(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_RMSPE_male[j,i]<-rmspe(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_MAPE_female[j,i]<-mape(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    error_RMSPE_female[j,i]<-rmspe(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    
  }
  
}

All_errors_rolling<-list(error_MAPE_male,error_MAPE_female,
                         error_RMSPE_male,error_RMSPE_female)

Errors_mean_rolling<-matrix(0,nrow=n_prefectures,ncol=length(All_errors_rolling))
Errors_sd_rolling<-matrix(0,nrow=n_prefectures,ncol=length(All_errors_rolling))
for (i in 1:length(All_errors_rolling)) {
  error=All_errors_rolling[[i]]
  Errors_mean_rolling[,i]=apply( error,2,mean)
  Errors_sd_rolling[,i]=apply( error,2,sd)
}
colnames(Errors_mean_rolling)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
colnames(Errors_sd_rolling)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
rownames(Errors_mean_rolling)<-names_states_France
rownames(Errors_sd_rolling)<-names_states_France

saveRDS(Errors_mean_rolling,"france.means_static.rds")
