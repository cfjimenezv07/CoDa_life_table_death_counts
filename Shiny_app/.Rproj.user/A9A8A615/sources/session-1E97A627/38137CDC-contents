# Dynamic FPCA

# Set a working directory
setwd("~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/")

#Library
library(freqdom.fda)

packages <- c("generics", "demography", "forecast","fda","fdaoutlier", 
              "rlist", "mrfDepth","ftsa","rainbow")

## Now load or install&load all
package_check <- lapply(
  packages,
  FUN <- function(x) {
    if (!require(x, character.only = TRUE)) {
      install.packages(x, dependencies = TRUE)
      library(x, character.only = TRUE)
    }
  }
)



################################################################################
# Dataset entries
################################################################################
dataset_entries<-readRDS("./Rcodes_paper/dataset_entries/USA/dataset_entries.rds")
year = dataset_entries[[1]]
n_year = dataset_entries[[2]]
age = dataset_entries[[3]]
n_age = dataset_entries[[4]]
n_prefectures=dataset_entries[[5]]

# Row partition
part_list = list()
for(ik in 1:n_prefectures) {
  part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)
}

#Column partition
n_populations=2
part_list_c = list()
for(ik in 1:n_populations) {
  part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)
}
################################################################################
# Datasets 
################################################################################
# USA
names_states_USA <- readRDS("./Rcodes_paper/names_states/USA/names_states.rds")
USA_male <- readRDS("./Rcodes_paper/datasets/USA/USA_male.rds")
USA_female <- readRDS("./Rcodes_paper/datasets/USA/USA_female.rds")
all_male<-t(list.cbind(USA_male))
all_female<-t(list.cbind(USA_female))
################################################################################
# function to remove the zeros
remove_zeroes <- function(data_raw,N,T, age_max) {
  data_nozero <- data_raw
    for(j in 2:age_max) {#For j=1, the two zeroes have been removed before
      for(k in 1:T){ 
        if(data_nozero[j,k]==-Inf){
          data_nozero[j,k] <- data_nozero[j-1,k]
        }
      }
  }
  return(data_nozero)
}

# Load the raw files
# # Load the data
dir.usa<-"~/My Drive/Spring 2023/STAT 397/PhD project 4/USA/"
dir.usa_expo<-"~/My Drive/Spring 2023/STAT 397/PhD project 4/USA_expo/"
dir.usa_mort<-"~/My Drive/Spring 2023/STAT 397/PhD project 4/USA_mort/"
filenames     <- dir(dir.usa)
USA_male      <- list()
USA_female    <- list()
fd_USA_male   <- list()
fd_USA_female <- list()
for(filename in dir(dir.usa)){
  cat(filename, "\n")
  file <- read.table(paste0(dir.usa, filename), skip = 2, header = TRUE)
  file_expo <- cbind(file[,1:2], file$Lx)
  colnames(file_expo)[3] <- "mx"
  filename_expo <- paste0(dir.usa_expo, strsplit(filename, ".txt")[[1]], "_expo.txt")
  write.table(file_expo, filename_expo, sep = "\t")
  file_mort <- file[,1:3]
  colnames(file_mort)[3] <- "mx"
  filename_mort <- paste0(dir.usa_mort, strsplit(filename, ".txt")[[1]], "_mort.txt")
  write.table(file_mort, filename_mort, sep = "\t")
  
  file <- read.demogdata(filename_mort, filename_expo,
                         type = "mortality", label = "USA",
                         skip = 0)
  file.ages <- extract.ages(file, ages = 0:100)
  mxrate <- demography::smooth.demogdata(file.ages)
  data_nozero <- remove_zeroes(data_raw=log(file$rate$mx), N=n_prefectures,T=n_year, age_max=n_age)
  # log10mxrate <- log10(data_nozero)
  data_list <- list()
  basis <- create.bspline.basis(c(0, 1), nbasis = 9, norder = 4)
  args <- seq(0, 1, length=dim(data_nozero)[1])
  if(strsplit(filename, "_")[[1]][2] == "male.txt"){
    data_list[[strsplit(filename, "_")[[1]][1]]]$rate$male <- exp(data_nozero)
    # USA_male[[strsplit(filename, "_")[[1]][1]]]<- log(smooth.demogdata(data_list[[strsplit(filename, "_")[[1]][1]]])$rate$male)
    fd_USA_male[[strsplit(filename, "_")[[1]][1]]] <- Data2fd(args, data_nozero, basis)
  }else{
    data_list[[strsplit(filename, "_")[[1]][1]]]$rate$female <- exp(data_nozero)
    # USA_female[[strsplit(filename, "_")[[1]][1]]] <- log(smooth.demogdata(data_list[[strsplit(filename, "_")[[1]][1]]])$rate$female)
    fd_USA_female[[strsplit(filename, "_")[[1]][1]]] <- Data2fd(args, data_nozero, basis)
  }

}

# saveRDS(fd_USA_male,"fd_USA_male.rds")
# saveRDS(fd_USA_female,"fd_USA_female.rds")

################################################################################
#Functional median polish decomposition and residuals
################################################################################
# source("FMP-ANOVA_decomposition.R")
library("ftsa")
Y=cbind(all_male,all_female)
Both<-ftsa::Two_way_median_polish(Y,year,age,n_prefectures,n_populations)
Residuals<- ftsa::Two_way_Residuals(Y,n_prefectures,year,age,n_populations)
Res1=Residuals$residuals1
Res2=Residuals$residuals2
Residuals_<-cbind(Res1,Res2)
# Reconstructed data
RR<-Residuals$rd #Matrix with the original data reconstructed from the FMP decomposition
#  It's the proof of the reconstruction of the residuals. 
Residuals$R #The result should be a vector with two entries TRUE, TRUE.
#Indicating that after adding both deterministic and time-varying components the FTS are recovered.
Fixed_part<-Residuals$Fixed_comp # deterministic components to be added up after forecasting

# Construct a Fd for the functional residuals
fd_USA_male_fixed <- list()
fd_USA_female_fixed <- list()
fd_USA_male_res <- list()
fd_USA_female_res <- list()
for (i in 1:n_prefectures) {
  Residuals_male   <- t(Res1[(1+n_year*i-n_year):(n_year*i),])
  Residuals_female <- t(Res2[(1+n_year*i-n_year):(n_year*i),])
  fixed_male   <- t(Fixed_part[(1+n_year*i-n_year):(n_year*i),1:n_age])
  fixed_female <- t(Fixed_part[(1+n_year*i-n_year):(n_year*i),(n_age+1):(2*n_age)])
basis <- create.bspline.basis(c(0, 1), nbasis = 9, norder = 4)
args <- seq(0, 1, length=n_age)
fd_USA_male_res[[i]]    <- Data2fd(args, Residuals_male, basis)
fd_USA_female_res[[i]]  <- Data2fd(args, Residuals_female, basis)
fd_USA_male_fixed[[i]]    <- Data2fd(args, fixed_male, basis)
fd_USA_female_fixed[[i]]  <- Data2fd(args, fixed_female, basis)
}

################################################################################
# Compute the DFPCA
################################################################################

res.dpca = fts.dpca(fd_USA_male_res[[1]], Ndpc = 1, freq=(-25:25/25)*pi)
plot(res.dpca$Xhat)
fts.plot.filters(res.dpca$filters)
# Compute functional PCA with only one component
res.pca = prcomp(t(fd_USA_male[[1]]$coefs), center = TRUE)
res.pca$x[,-1] = 0


