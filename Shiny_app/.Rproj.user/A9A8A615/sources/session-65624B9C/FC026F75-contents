# Application part of the paper on Functional data outlier detection.
library('fda')
library('fda.usc')
library('fdaoutlier')
library('scatterplot3d')
library('MASS')
library('ddalpha')
# Working directory
setwd("~/My Drive/Fall 2023/STAT 397/PhD project 1/Reviews_environmetrics/Rcodes/")
# Auxiliary functions
`%!in%`=Negate(`%in%`)
source("aux_PV_SI.R")
################################################################################
# Load the data
#1. PV
PV_2019 <- readRDS("./PV_2019.rds")
PV_2020 <- readRDS("./PV_2020.rds")
PV      <- list(PV_2019,PV_2020)
#2. GSI
SI_2019 <- readRDS("./SI_2019.rds")
SI_2020 <- readRDS("./SI_2020.rds")
SI      <- list(SI_2019,SI_2020)

dir.l<-"~/My Drive/Fall 2023/STAT 397/PhD project 1/Reviews_environmetrics/Plots_paper/"
savepdf <- function(file, width=16, height=10)
{
  fname <- paste(dir.l,file,".pdf",sep="")
  pdf(fname, width=width/2.54, height=height/2.54,
      pointsize=10)
  par(mgp=c(2.2,0.45,0), tcl=-0.4, mar=c(3.3,3.6,1.1,1.1))
}
################################################################################
# Univariate functional outliers based on the proposed method

#1. PV

#Outliers detection procedure

par(mfrow=c(1,1))
outliers_PV<-list()
outliers_magPV<-list()
for (h in 1:2) {
  data=PV[[h]]
  outl_fbplot=outliers_fbplot(data)
  outliers_magPV[[h]]<-outl_fbplot
  med=Get_median(data)
  M=dim(data)[1]
  N=dim(data)[2]
  t=seq(9,16,len=M)

  plot(NaN,xlim=c(8,17),ylim=c(min(data),max(data)),ylab='PV system [W]',xlab='Time [h] ')
  for (i in 1:N) {
    if(i%!in%outl_fbplot){
      lines(t,data[,i],col='azure3')
    }
  }
  
  for (i in 1:N) {
    if(i%in%outl_fbplot){
      lines(t,data[,i],col='darkturquoise')
    }
  }
  for (i in 1:N) {
    if(i%in%med){
      lines(t,data[,i],col=9,lwd=2)
    }
  }

  
  data=data[,-outl_fbplot]
  M=dim(data)[1]
  N=dim(data)[2]
  t=seq(0,1,len=M)
  med=Get_median(data)
  Pw.rank=as.matrix(t(apply(data,1,rank))) 
  abo=N-Pw.rank
  bel=Pw.rank-1
  Pw.depth=as.matrix((abo*bel)/combinat(N,2)+(N-1)/combinat(N,2)) 
  Pair.Pw.depth=matrix(NaN,nrow =(M-1),ncol = 2*N)
  for (i in 1:dim(data)[2]) {
    Pair.Pw.depth[,(2*i-1)]= Pw.depth[1:(M-1),i]
    Pair.Pw.depth[,(2*i)]= Pw.depth[2:M,i]
  }
  prod.var=matrix(0,ncol = 1,nrow = (dim(Pair.Pw.depth)[2]/2) )
  for (i in 1:(dim(Pair.Pw.depth)[2]/2)) {
    prod.var[i,]=var(Pair.Pw.depth[,(2*i-1)])*var(Pair.Pw.depth[,(2*i)])
  }
  #Bivariate Distribution of Non-Outlying curves
  corr=matrix(0,ncol = 1,nrow = (dim(Pair.Pw.depth)[2]/2))
  for (i in 1:(dim(Pair.Pw.depth)[2]/2)) {
    if( prod.var[i,]!=0){
      corr[i,]=cor(Pair.Pw.depth[,(2*i-1)],Pair.Pw.depth[,(2*i)])
    }else{
      corr[i,]=0
    }
  }
  #Boxplot of sample correlation
  a=boxplot.stats(corr)[[1]][1]
  outl=as.vector(which(corr<=a))
  outliers_PV[[h]]<-outl
  #data
  t=seq(9,16,len=M)

  plot(NaN,xlim=c(8,17),ylim=c(min(data),max(data)),ylab='PV system [W]',xlab='Time [h] ')
  for (i in 1:N) {
    if(i%!in%outl){
      lines(t,data[,i],col='azure3')
    }
  }
  for (i in 1:N) {
    if(i%in%outl){
      lines(t,data[,i],col='darkmagenta',lwd=2)
    }
  }
  for (i in 1:N) {
    if(i%in%med){
      lines(t,data[,i],col=9,lwd=2)
    }
  }

}


#2. SI

#from fbplot
outliers_SI<-list()
#par(mfrow=c(1,1))
outliers_mag_SI<-list()
for (h in 1:2) {
  data=SI[[h]]
  outl_fbplot=outliers_fbplot(data)
  outliers_mag_SI[[h]]<- outl_fbplot
  med=Get_median(data)
  M=dim(data)[1]
  N=dim(data)[2]
  t=seq(9,16,len=M)
 
  plot(NaN,xlim=c(8,17),ylim=c(min(data),max(data)),ylab='Global solar irradiance [W/m^2]',xlab='Time [h] ')
  for (i in 1:N) {
    if(i%!in%outl_fbplot){
      lines(t,data[,i],col='azure3')
    }
  }
  
  for (i in 1:N) {
    if(i%in%outl_fbplot){
      lines(t,data[,i],col='darkturquoise')
    }
  }
  for (i in 1:N) {
    if(i%in%med){
      lines(t,data[,i],col=9,lwd=2)
    }
  }

  data=data[,-outl_fbplot]
  M=dim(data)[1]
  N=dim(data)[2]
  t=seq(0,1,len=M)
  med=Get_median(data)
  Pw.rank=as.matrix(t(apply(data,1,rank))) 
  abo=N-Pw.rank
  bel=Pw.rank-1
  Pw.depth=as.matrix((abo*bel)/combinat(N,2)+(N-1)/combinat(N,2)) 
  Pair.Pw.depth=matrix(NaN,nrow =(M-1),ncol = 2*N)
  for (i in 1:dim(data)[2]) {
    Pair.Pw.depth[,(2*i-1)]= Pw.depth[1:(M-1),i]
    Pair.Pw.depth[,(2*i)]= Pw.depth[2:M,i]
  }
  prod.var=matrix(0,ncol = 1,nrow = (dim(Pair.Pw.depth)[2]/2) )
  for (i in 1:(dim(Pair.Pw.depth)[2]/2)) {
    prod.var[i,]=var(Pair.Pw.depth[,(2*i-1)])*var(Pair.Pw.depth[,(2*i)])
  }
  #Bivariate Distribution of Non-Outlying curves
  corr=matrix(0,ncol = 1,nrow = (dim(Pair.Pw.depth)[2]/2))
  for (i in 1:(dim(Pair.Pw.depth)[2]/2)) {
    if( prod.var[i,]!=0){
      corr[i,]=cor(Pair.Pw.depth[,(2*i-1)],Pair.Pw.depth[,(2*i)])
    }else{
      corr[i,]=0
    }
  }
  #Boxplot of sample correlation
  a=boxplot.stats(corr)[[1]][1]
  outl=as.vector(which(corr<=a))
  outliers_SI[[h]]<-outl
  #data
  t=seq(9,16,len=M)

  plot(NaN,xlim=c(8,17),ylim=c(min(data),max(data)),ylab='Global solar irradiance [W/m^2]',xlab='Time [h] ')
  for (i in 1:N) {
    if(i%!in%outl){
      lines(t,data[,i],col='azure3')
    }
  }
  for (i in 1:N) {
    if(i%in%outl){
      lines(t,data[,i],col='darkmagenta',lwd=2)
    }
  }
  for (i in 1:N) {
    if(i%in%med){
      lines(t,data[,i],col=9,lwd=2)
    }
  }

}


################################################################################
# Bivariate functional outliers
################################################################################

#Bivariate Functional data PV-Solar Irradiance


#magnitude outliers
Magnitude_outliers_both_1<-unique(outliers_mag_SI[[1]],outliers_magPV[[1]])
Magnitude_outliers_both_2<-unique(outliers_mag_SI[[2]],outliers_magPV[[2]])
PV<-list(PV_2019[,-Magnitude_outliers_both_1],PV_2020[,-Magnitude_outliers_both_2])
G.data<-list(SI_2019[,-Magnitude_outliers_both_1],SI_2020[,-Magnitude_outliers_both_2])


#par(mfrow=c(1,1))
Biv_data=list()
med2=list()
p=dim(SI_2019)[1]
n=dim(SI_2019)[2]
d=2
for (m in 1:length(PV)) {
  data_PV=PV[[m]]
  data_SI=G.data[[m]]
  #PV-Solar Irradiance
  n=dim(data_PV)[2]
  biv_data = array(0, dim = c(n, p, d))
  biv_data[,,1]=t(as.matrix(data_PV))
  biv_data[,,2]=t(as.matrix(data_SI))
  Biv_data[[m]]=biv_data

  med2[[m]]=fdaoutlier::msplot(biv_data,plot = F)$median_curve
} 

#remove magnitude outliers
outliers<-list()
for (h in 1:2) {
  mod=Biv_data[[h]]
  #Computing outliers through the simplicial
  n=dim(mod)[1]
  PSD=matrix(0,nrow=p,ncol = n)
  for (i in 1:n) {
    SD=mdepth.SD(mod[i,,],mod[i,,])
    PSD[,i]=SD$dep
  }
  PSDm<-apply(PSD,2,mean)
  # out_1=mag_outliers_fromSD(mod[,,1],PSDm)
  # out_2=mag_outliers_fromSD(mod[,,2],PSDm)
  
  Pair.Pw.depth=matrix(NaN,nrow =(p-1),ncol = 2*n)
  for (i in 1:dim(PSD)[2]) {
    Pair.Pw.depth[,(2*i-1)]= PSD[1:(p-1),i]
    Pair.Pw.depth[,(2*i)]= PSD[2:p,i]
  }
  
  prod.var=matrix(0,ncol = 1,nrow = (dim(Pair.Pw.depth)[2]/2) )
  for (i in 1:(dim(Pair.Pw.depth)[2]/2)) {
    prod.var[i,]=var(Pair.Pw.depth[,(2*i-1)])*var(Pair.Pw.depth[,(2*i)])
    
  }
  
  #Bivariate Distribution of Non-Outlying curves
  corr=matrix(0,ncol = 1,nrow = (dim(Pair.Pw.depth)[2]/2))
  for (i in 1:(dim(Pair.Pw.depth)[2]/2)) {
    if( prod.var[i,]!=0){
      corr[i,]=cor(Pair.Pw.depth[,(2*i-1)],Pair.Pw.depth[,(2*i)])
    }else{
      corr[i,]=0
    }
  }
  
  a=boxplot.stats(corr)[[1]][1]
  outliers[[h]]=as.vector(which(corr<=a))
  
}




plot_data = function (data = data){
  x = seq(8, 17) 
  y = data[1, , 2]
  z = data[1, , 1]
  s3d = scatterplot3d(x, y, z,
                      type = "l",
                      pch = 19,
                      color = 'gray86',
                      lab = c(1, 1, 2),
                      angle = 45,
                      mar = c(3,3,3,3.5),
                      xlim = c(7,17),
                      ylim = c(0, 2000),
                      zlim = c(0,250000),
                      xlab = "Time [h]",
                      ylab = "Global solar irradiance [W/m^2]",
                      zlab = "PV power [W]",
                      #main = " Bivariate  Curves",
                      #font.axis = 0.2,
                      cex.lab = 0.7,
                      box = FALSE,
                      axis = T,
                      tick.marks=T,
                      label.tick.marks=T
  )
  for (i in 1:n){
    if(i%!in% o){
      x = seq(8, 17) 
      y = data[i, , 2]
      z = data[i, , 1]
      s3d$points3d(x, 
                   y, 
                   z, 
                   pch = 19, 
                   col = 'azure3',
                   type = "l")
    }
  }
  for (i in 1:n){
    if(i%in% o){
      x = seq(8, 17) 
      y = data[i, , 2]
      z = data[i, , 1]
      s3d$points3d(x, 
                   y, 
                   z, 
                   pch = 19, 
                   col = 'darkmagenta',
                   type = "l",lwd=2)
    }
  }
}

savepdf("Biv_1")
par(mfrow=c(1,1))
m=1
data=Biv_data[[m]]
o=outliers[[m]]
n=dim(data)[1]
plot_data(data)
dev.off()

savepdf("Biv_2")
m=2
data=Biv_data[[m]]
o=outliers[[m]]
n=dim(data)[1]
plot_data(data)
dev.off()
