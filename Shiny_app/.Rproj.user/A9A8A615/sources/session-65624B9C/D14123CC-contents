# Other_databases USA

packages <- c("generics", "demography", "forecast","fda","fdaoutlier", "rlist", "mrfDepth","ftsa","rainbow")
## Now load or install&load all
package_check <- lapply(
  packages,
  FUN <- function(x) {
    if (!require(x, character.only = TRUE)) {
      install.packages(x, dependencies = TRUE)
      library(x, character.only = TRUE)
    }
  }
)
################################################################################
# Dataset entries
################################################################################
year = 1959:2020
n_year = length(year)
age = 0:100
n_age = length(age)
n_prefectures=51

# Row partition
part_list = list()
for(ik in 1:n_prefectures) {
  part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)
}

#Column partition
n_populations=2
part_list_c = list()
for(ik in 1:n_populations) {
  part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)
}
################################################################################
# Dataset 
################################################################################
# # Load the data
# dir.usa<-"~/My Drive/Spring 2023/STAT 397/PhD project 4/USA/"
# dir.usa_expo<-"~/My Drive/Spring 2023/STAT 397/PhD project 4/USA_expo/"
# dir.usa_mort<-"~/My Drive/Spring 2023/STAT 397/PhD project 4/USA_mort/"
# filenames <- dir(dir.usa)
# USA_male <- list()
# USA_female <- list()
for(filename in dir(dir.usa)){
  cat(filename, "\n")
  file <- read.table(paste0(dir.usa, filename), skip = 2, header = TRUE)
  file_expo <- cbind(file[,1:2], file$Lx)
  colnames(file_expo)[3] <- "mx"
  filename_expo <- paste0(dir.usa_expo, strsplit(filename, ".txt")[[1]], "_expo.txt")
  write.table(file_expo, filename_expo, sep = "\t")
  file_mort <- file[,1:3]
  colnames(file_mort)[3] <- "mx"
  filename_mort <- paste0(dir.usa_mort, strsplit(filename, ".txt")[[1]], "_mort.txt")
  write.table(file_mort, filename_mort, sep = "\t")

  file <- read.demogdata(filename_mort, filename_expo,
                         type = "mortality", label = "USA",
                         skip = 0)
  file.ages <- extract.ages(file, ages = 0:100)
  mxrate <- demography::smooth.demogdata(file.ages)
  log10mxrate <- log10(mxrate$rate$mx)
  if(strsplit(filename, "_")[[1]][2] == "male.txt"){
    USA_male[[strsplit(filename, "_")[[1]][1]]] <- log10mxrate
  }else{
    USA_female[[strsplit(filename, "_")[[1]][1]]] <- log10mxrate
  }
}
# # saveRDS(USA_male,"USA_male.rds")
# # saveRDS(USA_female,"USA_female.rds")

# load the data
USA_male <- readRDS("~/My Drive/Spring 2023/STAT 397/PhD project 4/Rcodes/USA_male.rds")
USA_female <- readRDS("~/My Drive/Spring 2023/STAT 397/PhD project 4/Rcodes/USA_female.rds")
all_male<-t(list.cbind(USA_male))
all_female<-t(list.cbind(USA_female))


################################################################################
#Functional median polish decomposition and residuals
################################################################################
source("Two_way_FM_Res.R")
Y=cbind(all_male,all_female)
Both<-Two_way_median_polish(Y,
                            row_partition_index=part_list,
                            column_partition_index=part_list_c)
Residuals<-Two_way_Residuals(Y,Both,n_prefectures,n_year,n_age)
Res1=Residuals$residuals1
Res2=Residuals$residuals2
Residuals_<-cbind(Res1,Res2)
# Reconstructed data
RR<-Residuals$rd #Matrix with the original data reconstructed from the FMP decomposition
#  It's the proof of the reconstruction of the residuals. 
Residuals$R #The result should be a vector with two entries TRUE, TRUE.
Fixed_part<-Residuals$Fixed_comp #Fixed components to be added up after forecasting
################################################################################
# Forecasting
################################################################################
source("Point_forecasting.R")

################################################################################
# With a different horizon rolling
################################################################################
forecasted_curves_triangular_USA<-list()
for (i in 1:n_prefectures) {
  max_h=10
  pref=(n_year*i-(n_year-1)):(n_year*i)
  forecasted_prefecture<-matrix(0,nrow = n_age*2,ncol=max_h)
  for (k in 1:max_h) {
    pref_k<-pref[k:(n_year-max_h-1+k)]
    t = Sys.time()
    frc=Pref_forecasted_curves(fixed_com=Fixed_part[pref_k,],
                               Residuals_f=Residuals_[pref_k,],
                               est_method = "lrc",
                               fh = 1, PI = NULL, B = 1000)
    forecasted_prefecture[,k]=frc$med_polish_curve_forecast
    print(Sys.time() - t)
    print(k)
  }
  forecasted_curves_triangular_USA[[i]]=forecasted_prefecture
  print(i)
}
# saveRDS(forecasted_curves_triangular_USA,"forecasted_curves_triangular_USA.rds")
forecasted_curves_triangular_USA <- readRDS("forecasted_curves_triangular_USA.rds")


################################################################################
#Plots 
################################################################################
names_states <- readRDS("names_states.rds")


dir.l<-"~/My Drive/Spring 2023/STAT 397/PhD project 4/Results/"
# pdf(paste0(dir.l, "Forecast_prefecture_USA.pdf"))
# male<-Y[,1:n_age]
# female<-Y[,(n_age+1):(2*n_age)]
# for (j in 1:n_prefectures) {
#   par(mfrow=c(1,2))
#   forecasted_10=forecasted_curves_triangular_USA
#   forcasted_male<-forecasted_10[[j]][1:n_age,]
#   forcasted_female<-forecasted_10[[j]][(n_age+1):(2*n_age),]
#   matplot(t(male)[,(n_year*i-(n_year-1)):(n_year*i-10)],type='l',col='gray86'
#           ,main=paste("State",names_states[j]),xlab = 'Age'
#           ,ylab='Male Log mortality rate',ylim=c(min(forcasted_male),max(forcasted_male)))
#   colnames(forcasted_male)<-1:10
#   Res_forcasted_curves_male<-rainbow::fts(x=1:n_age, y=forcasted_male , xname='Age',yname='USA Mr')
#   lines.fds(Res_forcasted_curves_male)
#   matplot(t(female)[,(n_year*i-(n_year-1)):(n_year*i-10)],type='l',col='gray86'
#           ,main=paste("State",names_states[j]),xlab = 'Age'
#           ,ylab='Female Log mortality rate',ylim=c(min(forcasted_female),max(forcasted_female)))
#   colnames(forcasted_female)<-1:10
#   Res_forcasted_curves_female<-rainbow::fts(x=1:n_age, y=forcasted_female , xname='Age',yname='USA Mr')
#   lines.fds(Res_forcasted_curves_female)
# }
# dev.off()

########################################################################
#Compute the error 
########################################################################
source("forecast_errors.R")
error_MAPE_male_1<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_male_1<-matrix(0,nrow=10,ncol = n_prefectures)
error_MAPE_female_1<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_female_1<-matrix(0,nrow=10,ncol = n_prefectures)
male<-Y[,1:n_age]
female<-Y[,(n_age+1):(2*n_age)]
for (i in 1:n_prefectures) {
  forecasted_pref_male=forecasted_curves_triangular_USA[[i]][1:n_age,]
  forecasted_pref_female=forecasted_curves_triangular_USA[[i]][(n_age+1):(2*n_age),]
  True_pop_male=t(male[(n_year*i-9):(n_year*i),])
  True_pop_female=t(female[(n_year*i-9):(n_year*i),])
  for (j in 1:10) {
    error_MAPE_male_1[j,i]<-mape(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_RMSPE_male_1[j,i]<-rmspe(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_MAPE_female_1[j,i]<-mape(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    error_RMSPE_female_1[j,i]<-rmspe(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    
  }
  
}


#All_errors<-list(error_MAE,error_MASE,error_MDASE,error_RMSSE)
All_errors_1<-list(error_MAPE_male_1,error_MAPE_female_1,
                   error_RMSPE_male_1,error_RMSPE_female_1)
# saveRDS(All_errors_1,"PFE_USA.rds")

Errors_mean_1_USA<-matrix(0,nrow=n_prefectures,ncol=4)
Errors_sd_1_USA<-matrix(0,nrow=n_prefectures,ncol=4)
for (i in 1:4) {
  error=All_errors_1[[i]]
  Errors_mean_1_USA[,i]=apply( error,2,mean)
  Errors_sd_1_USA[,i]=apply( error,2,sd)
}
colnames(Errors_mean_1_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
colnames(Errors_sd_1_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
rownames(Errors_mean_1_USA)<-names_states
rownames(Errors_sd_1_USA)<-names_states

# saveRDS(Errors_mean_1_USA,"Errors_mean_1_USA.rds")

########################################################################
# Comparison with FANOVA
########################################################################
source("FANOVA.R")
FANOVA_means<-FANOVA(data_pop1=t(all_male),data_pop2=t(all_female),n_year
                     ,n_prefectures,n_age,n_populations=2,row_par=part_list)
Residuals_means<-Two_way_Residuals_means(FANOVA_means,data_pop1=t(all_male),data_pop2=t(all_female)
                                         ,n_prefectures,n_year,n_age)
Res1_means=Residuals_means$residuals1_mean
Res2_means=Residuals_means$residuals2_mean
Residuals_mean<-cbind(Res1_means,Res2_means)
# Reconstructed data
RR<-Residuals_means$rd #Matrix with the original data reconstructed from te FMP decomposition
#  It's the proof of the reconstruction of the residuals. 
Residuals_means$R #The result should be a vector with two entries TRUE, TRUE.
Fixed_part_means<-Residuals_means$Fixed_comp_mean #Fixed components to be added up after forecasting

################################################################################
# Forecasting based on FANOVA 
################################################################################
library(ftsa)
library(demography)
mean_resi<-cbind(Res1_means,Res2_means)
source("forecast_Arima.R")
Pref_forecasted_curves_mean<-function(fixed_com,Residuals_f,
                                      est_method = c("lrc", "cov"),
                                      fh = 30, PI = NULL, B = 1000){
  mean_resi=t(Residuals_f)
  if(est_method == "lrc"){
    # estimate long-run covariance by kernel sandwich estimator
    mean_resi_lrc = long_run_covariance_estimation(mean_resi)
  }else if(est_method == "cov"){
    # estimate empirical covariance function
    mean_resi_lrc = cov(t(mean_resi))
  }
  # perform eigen-decomposition
  mean_resi_eigen = eigen(mean_resi_lrc)
  # determine retained number of components via eigenvalue ratio
  ret_component = vector("numeric", length(mean_resi_eigen$values) - 1)
  for(ik in 1:(length(mean_resi_eigen$values) - 1)){
    ret_component[ik] = mean_resi_eigen$values[ik+1]/mean_resi_eigen$values[ik]
  }
  retain_component = which.min(ret_component)
  # determine 1st set of basis function and its scores
  mean_resi_basis = as.matrix(mean_resi_eigen$vectors[,1:retain_component])
  mean_resi_score = crossprod(mean_resi, mean_resi_basis)
  # obtain forecasts of PC scores via auto.arima
  mean_resi_score_forecast = matrix(NA, retain_component, fh)
  mean_resi_score_forecast_boot = array(NA, dim = c(retain_component, fh, B))
  for(ik in 1:retain_component){
    dum = forecast_Arima(auto.arima(mean_resi_score[,ik]), h = fh, bootstrap = TRUE, npaths = B)
    mean_resi_score_forecast[ik,] = dum$mean
    mean_resi_score_forecast_boot[ik,,] = t(dum$sim)
    rm(ik); rm(dum)
  }
  mean_resi_forecast = mean_resi_basis %*% mean_resi_score_forecast
  
  # add the fixed parts
  
  Fixed=t(fixed_com)[,1:fh]
  mean_curve_forecast = mean_resi_forecast + Fixed
  
  return(list(mean_curve_forecast=mean_curve_forecast, 
              mean_resi_forecast=  mean_resi_forecast))
  
}

################################################################################
# Forecast with a different horizon with means rolling window approach
################################################################################
forecasted_curves_triangular_means_USA<-list()
for (i in 1:n_prefectures) {
  max_h=10
  pref=(n_year*i-(n_year-1)):(n_year*i)
  forecasted_prefecture_m<-matrix(0,nrow = n_age*2,ncol=10)
  for (k in 1:max_h) {
    pref_k<-pref[k:(n_year-max_h-1+k)]
    frc=Pref_forecasted_curves_mean(fixed_com=Fixed_part_means[pref_k,],
                                    Residuals_f=mean_resi[pref_k,],
                                    est_method = "lrc",
                                    fh = 1, PI = NULL, B = 1000)
    forecasted_prefecture_m[,k]=frc$mean_curve_forecast
    print(k)
  }
  forecasted_curves_triangular_means_USA[[i]]=forecasted_prefecture_m
  print(i)
}

# saveRDS(forecasted_curves_triangular_means_USA,"forecasted_curves_triangular_means_USA.rds")
forecasted_curves_triangular_means_USA <- readRDS("forecasted_curves_triangular_means_USA.rds")
########################################################################
#Compute the error from FANOVA
########################################################################
source("forecast_errors.R")
error_MAPE_means_male_1<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_means_male_1<-matrix(0,nrow=10,ncol = n_prefectures)
error_MAPE_means_female_1<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_means_female_1<-matrix(0,nrow=10,ncol = n_prefectures)
for (i in 1:n_prefectures) {
  forecasted_pref_male=forecasted_curves_triangular_means_USA[[i]][1:n_age,]
  forecasted_pref_female=forecasted_curves_triangular_means_USA[[i]][(n_age+1):(2*n_age),]
  True_pop_male=t(male[(46*i-9):(46*i),])
  True_pop_female=t(female[(46*i-9):(46*i),])
  for (j in 1:10) {
    error_MAPE_means_male_1[j,i]<-mape(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_RMSPE_means_male_1[j,i]<-rmspe(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_MAPE_means_female_1[j,i]<-mape(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    error_RMSPE_means_female_1[j,i]<-rmspe(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    
  }
  
}


#All_errors<-list(error_MAE,error_MASE,error_MDASE,error_RMSSE)
All_errors_basedmeans_1_USA<-list(error_MAPE_means_male_1,error_MAPE_means_female_1,
                              error_RMSPE_means_male_1,error_RMSPE_means_female_1)
# saveRDS(All_errors_basedmeans_1_USA,"PFE_USA_basedmeans.rds")
Errors_mean_basedmeans_1_USA<-matrix(0,nrow=n_prefectures,ncol=4)
Errors_sd_basedmeans_1_USA<-matrix(0,nrow=n_prefectures,ncol=4)
for (i in 1:4) {
  error=All_errors_basedmeans_1_USA[[i]]
  Errors_mean_basedmeans_1_USA[,i]=apply( error,2,mean)
  Errors_sd_basedmeans_1_USA[,i]=apply( error,2,sd)
}
colnames(Errors_mean_basedmeans_1_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
colnames(Errors_sd_basedmeans_1_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
rownames(Errors_mean_basedmeans_1_USA)<-names_states
rownames(Errors_sd_basedmeans_1_USA)<-names_states
# saveRDS(Errors_mean_basedmeans_1_USA,"Errors_mean_basedmeans_1_USA.rds")



########################################################################
# Plots from both approaches
########################################################################
#plot all errors rolling window
Errors_mean_basedmeans_1_USA <- readRDS("Errors_mean_basedmeans_1_USA.rds")
plot_errors<-cbind(Errors_mean_basedmeans_1_USA[,1],Errors_mean_1_USA[,1]
                   ,Errors_mean_basedmeans_1_USA[,2],Errors_mean_1_USA[,2]
                   ,Errors_mean_basedmeans_1_USA[,3],Errors_mean_1_USA[,3]
                   ,Errors_mean_basedmeans_1_USA[,4],Errors_mean_1_USA[,4])
colnames(plot_errors)<-c("MAPE_male_mean","MAPE_male","MAPE_female_mean"
                         ,"MAPE_female","RMSPE_male_mean","RMSPE_male"
                         ,"RMSPE_female_mean","RMSPE_female")
par(mfrow=c(1,1))
boxplot(plot_errors,col=c('gray','darkblue','gray','darkblue','gray','darkgreen','gray','darkgreen')
        ,main="MAPE and RMSPE errors rolling window approach")


########################################################################
# Compute interval forecasts and coverage probability
########################################################################
# Split residuals per prefecture
male_prefecture_res<-lapply(1:length(part_list), 
                            function(k){Res1[part_list[[k]], ]})
female_prefecture_res<-lapply(1:length(part_list), 
                              function(k){Res2[part_list[[k]], ]})

#split the fixed components by prefecture
male_prefecture_fixed<-lapply(1:length(part_list), 
                              function(k){Fixed_part[part_list[[k]],1:n_age ]})

female_prefecture_fixed<-lapply(1:length(part_list), 
                                function(k){Fixed_part[part_list[[k]],(n_age+1):(2*n_age) ]})

source("Compute_coverages.R")
# Emp_cov_male_0.90<-matrix(0,nrow=n_prefectures,ncol = 10)
# Emp_cov_female_0.90<-matrix(0,nrow=n_prefectures,ncol = 10)
Emp_cov_male_0.85<-matrix(0,nrow=n_prefectures,ncol = 10)
Emp_cov_female_0.85<-matrix(0,nrow=n_prefectures,ncol = 10)
for (i in 1:n_prefectures) {
  Emp_cov_male_0.85[i,]<-coverage_comp(sim_data=t(male_prefecture_res[[i]]),fixed_comp=t(male_prefecture_fixed[[i]]), sample_number=n_year, no_boot = 100,
                                        no_core=10,K_val = NULL,prediction_method = "sieve_bootstrap"
                                        ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.85)
  Emp_cov_female_0.85[i,]<-coverage_comp(sim_data=t(female_prefecture_res[[i]]),fixed_comp=t(female_prefecture_fixed[[i]]), sample_number=n_year, no_boot = 100,
                                          no_core=10,K_val = NULL,prediction_method = "sieve_bootstrap"
                                          ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.85)
  # Emp_cov_male_0.90[i,]<-coverage_comp(sim_data=t(male_prefecture_res[[i]]),fixed_comp=t(male_prefecture_fixed[[i]]), sample_number=n_year, no_boot = 100,
  #                                       no_core=10,K_val = NULL,prediction_method = "sieve_bootstrap"
  #                                       ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.90)
  # Emp_cov_female_0.90[i,]<-coverage_comp(sim_data=t(female_prefecture_res[[i]]),fixed_comp=t(female_prefecture_fixed[[i]]), sample_number=n_year, no_boot = 100,
  #                                         no_core=10,K_val = NULL,prediction_method = "sieve_bootstrap"
  #                                         ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.90)
  print(i)
}

Emp_cov_0.85<-cbind(Emp_cov_male_0.85[,c(1:4,7:8)],Emp_cov_female_0.85[,c(1:4,7:8)])
# Emp_cov_0.90<-cbind(Emp_cov_male_0.90[,c(1:4,7:8)],Emp_cov_female_0.90[,c(1:4,7:8)])
Emp_cov_USA<-Emp_cov_0.85
colnames(Emp_cov_USA) = c("Pointwise 80% coverage", "Pointwise 95% coverage",
                     "80% interval score", "95% interval score",
                     "CPD Pointwise 80% coverage","CPD Pointwise 95% coverage",
                     "Pointwise 80% coverage", "Pointwise 95% coverage",
                     "80% interval score", "95% interval score",
                     "CPD Pointwise 80% coverage","CPD Pointwise 95% coverage")

rownames(Emp_cov_USA)<-names_states
# saveRDS(Emp_cov_USA,"Emp_cov_USA.rds")

# write a file
library("openxlsx")
# write.xlsx(as.data.frame(Emp_cov_USA),file="~/My Drive/Spring 2023/STAT 397/PhD project 4/Results/Emp_cov_USA.xlsx",colNames=T,rownames=T)

################################################################################
# With a different horizon expanding window 
################################################################################
forecasted_curves_triangular2_USA<-list()
for (i in 1:n_prefectures) {
  max_h=10
  pref=(n_year*i-(n_year-1)):(n_year*i)
  forecasted_prefecture<-matrix(0,nrow = n_age*2,ncol=10)
  for (k in 1:max_h) {
    pref_k<-pref[1:(n_year-max_h-1+k)]
    frc=Pref_forecasted_curves(fixed_com=Fixed_part[pref_k,],
                               Residuals_f=Residuals_[pref_k,],
                               est_method = "lrc",
                               fh = k, PI = NULL, B = 1000)
    forecasted_prefecture[,k]=frc$med_polish_curve_forecast[,1]
    print(k)
  }
  forecasted_curves_triangular2_USA[[i]]=forecasted_prefecture
  print(i)
}
 saveRDS(forecasted_curves_triangular2_USA,"forecasted_curves_triangular2_USA.rds")

########################################################################
#Compute the error 
########################################################################
source("forecast_errors.R")
error_MAPE_male_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_male_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
error_MAPE_female_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_female_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
for (i in 1:n_prefectures) {
  forecasted_pref_male=forecasted_curves_triangular2_USA[[i]][1:n_age,]
  forecasted_pref_female=forecasted_curves_triangular2_USA[[i]][(n_age+1):(2*n_age),]
  True_pop_male=t(male[(n_year*i-9):(n_year*i),])
  True_pop_female=t(female[(n_year*i-9):(n_year*i),])
  for (j in 1:10) {
    error_MAPE_male_2_USA[j,i]<-mape(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_RMSPE_male_2_USA[j,i]<-rmspe(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_MAPE_female_2_USA[j,i]<-mape(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    error_RMSPE_female_2_USA[j,i]<-rmspe(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    
  }
  
}



All_errors_2_USA<-list(error_MAPE_male_2_USA,error_MAPE_female_2_USA,
                   error_RMSPE_male_2_USA,error_RMSPE_female_2_USA)

Errors_mean_2_USA<-matrix(0,nrow=n_prefectures,ncol=4)
Errors_sd_2_USA<-matrix(0,nrow=n_prefectures,ncol=4)
for (i in 1:4) {
  error=All_errors_2_USA[[i]]
  Errors_mean_2_USA[,i]=apply( error,2,mean)
  Errors_sd_2_USA[,i]=apply( error,2,sd)
}
colnames(Errors_mean_2_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
colnames(Errors_sd_2_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
rownames(Errors_mean_2_USA)<-names_states
rownames(Errors_sd_2_USA)<-names_states

########################################################################################
# Computation of the error with different horizons expanding approach based on means
########################################################################################
forecasted_curves_triangular_means2_USA<-list()
for (i in 1:n_prefectures) {
  max_h=10
  pref=(n_year*i-(n_year-1)):(n_year*i)
  forecasted_prefecture_m<-matrix(0,nrow = n_age*2,ncol=10)
  for (k in 1:max_h) {
    pref_k<-pref[1:(n_year-max_h-1+k)]
    frc=Pref_forecasted_curves_mean(fixed_com=Fixed_part_means[pref_k,],
                                    Residuals_f=mean_resi[pref_k,],
                                    est_method = "lrc",
                                    fh = k, PI = NULL, B = 1000)
    forecasted_prefecture_m[,k]=frc$mean_curve_forecast[,1]
    print(k)
  }
  forecasted_curves_triangular_means2_USA[[i]]=forecasted_prefecture_m
  print(i)
}

saveRDS(forecasted_curves_triangular_means2_USA,"forecasted_curves_triangular_means2_USA.rds")
########################################################################
#Compute the error expanding window
########################################################################
source("forecast_errors.R")
error_MAPE_means_male_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_means_male_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
error_MAPE_means_female_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
error_RMSPE_means_female_2_USA<-matrix(0,nrow=10,ncol = n_prefectures)
for (i in 1:n_prefectures) {
  forecasted_pref_male=forecasted_curves_triangular_means2_USA[[i]][1:n_age,]
  forecasted_pref_female=forecasted_curves_triangular_means2_USA[[i]][(n_age+1):(2*n_age),]
  True_pop_male=t(male[(n_year*i-9):(n_year*i),])
  True_pop_female=t(female[(n_year*i-9):(n_year*i),])
  for (j in 1:10) {
    error_MAPE_means_male_2_USA[j,i]<-mape(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_RMSPE_means_male_2_USA[j,i]<-rmspe(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])
    error_MAPE_means_female_2_USA[j,i]<-mape(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    error_RMSPE_means_female_2_USA[j,i]<-rmspe(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])
    
  }
  
}


All_errors_basedmeans_2_USA<-list(error_MAPE_means_male_2_USA,error_MAPE_means_female_2_USA,
                              error_RMSPE_means_male_2_USA,error_RMSPE_means_female_2_USA)

Errors_mean_basedmeans_2_USA<-matrix(0,nrow=n_prefectures,ncol=4)
Errors_sd_basedmeans_2_USA<-matrix(0,nrow=n_prefectures,ncol=4)
for (i in 1:4) {
  error=All_errors_basedmeans_2_USA[[i]]
  Errors_mean_basedmeans_2_USA[,i]=apply( error,2,mean)
  Errors_sd_basedmeans_2_USA[,i]=apply( error,2,sd)
}
colnames(Errors_mean_basedmeans_2_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
colnames(Errors_sd_basedmeans_2_USA)<-c("MAPE_male","MAPE_female","RMSPE_male","RMSPE_female")
rownames(Errors_mean_basedmeans_2_USA)<-names_states
rownames(Errors_sd_basedmeans_2_USA)<-names_states
# saveRDS(Errors_mean_basedmeans_2_USA,"Errors_mean_basedmeans_2_USA.rds")
########################################################################
# Plots from both approaches for the expanding window approach
########################################################################
#plot all errors rolling window
Errors_mean_basedmeans_2_USA <- readRDS("Errors_mean_basedmeans_2_USA.rds")
plot_errors<-cbind(Errors_mean_basedmeans_2_USA[,1],Errors_mean_2_USA[,1]
                   ,Errors_mean_basedmeans_2_USA[,2],Errors_mean_2_USA[,2]
                   ,Errors_mean_basedmeans_2_USA[,3],Errors_mean_2_USA[,3]
                   ,Errors_mean_basedmeans_2_USA[,4],Errors_mean_2_USA[,4])
colnames(plot_errors)<-c("MAPE_male_mean","MAPE_male","MAPE_female_mean"
                         ,"MAPE_female","RMSPE_male_mean","RMSPE_male"
                         ,"RMSPE_female_mean","RMSPE_female")
# par(mfrow=c(1,1))
# pdf(paste0(dir.l, "Expanding_horizon_approach.pdf"))
# boxplot(plot_errors,col=c('gray','darkblue','gray','darkblue','gray','darkgreen','gray','darkgreen')
#         ,main="MAPE and RMSPE errors rolling window approach")
# dev.off()

############################################################################
# Compute interval forecasts and coverage probability for FANOVA approach
############################################################################
# Split residuals per prefecture
male_prefecture_res_means<-lapply(1:length(part_list), 
                                  function(k){Res1_means[part_list[[k]], ]})
female_prefecture_res_means<-lapply(1:length(part_list), 
                                    function(k){Res2_means[part_list[[k]], ]})

#split the fixed components by prefecture
male_prefecture_fixed_means<-lapply(1:length(part_list), 
                                    function(k){Fixed_part_means[part_list[[k]],1:n_age ]})

female_prefecture_fixed_means<-lapply(1:length(part_list), 
                                      function(k){Fixed_part_means[part_list[[k]],(n_age+1):(2*n_age) ]})

source("Compute_coverages.R")
# Emp_cov_male_0.90<-matrix(0,nrow=n_prefectures,ncol = 10)
# Emp_cov_female_0.90<-matrix(0,nrow=n_prefectures,ncol = 10)
Emp_cov_male_0.85_means<-matrix(0,nrow=n_prefectures,ncol = 10)
Emp_cov_female_0.85_means<-matrix(0,nrow=n_prefectures,ncol = 10)
for (i in 1:n_prefectures) {
  Emp_cov_male_0.85_means[i,]<-coverage_comp(sim_data=t(male_prefecture_res_means[[i]]),fixed_comp=t(male_prefecture_fixed_means[[i]]), sample_number=n_year, no_boot = 100,
                                             no_core=(detectCores()-2),K_val = NULL,prediction_method = "sieve_bootstrap"
                                             ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.85)
  Emp_cov_female_0.85_means[i,]<-coverage_comp(sim_data=t(female_prefecture_res_means[[i]]),fixed_comp=t(female_prefecture_fixed_means[[i]]), sample_number=n_year, no_boot = 100,
                                               no_core=(detectCores()-2),K_val = NULL,prediction_method = "sieve_bootstrap"
                                               ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.85)
  # Emp_cov_male_0.90[i,]<-coverage_comp(sim_data=t(male_prefecture_res[[i]]),fixed_comp=t(male_prefecture_fixed[[i]]), sample_number=n_year, no_boot = 100,
  #                                       no_core=(detectCores()-2),K_val = NULL,prediction_method = "sieve_bootstrap"
  #                                       ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.90)
  # Emp_cov_female_0.90[i,]<-coverage_comp(sim_data=t(female_prefecture_res[[i]]),fixed_comp=t(female_prefecture_fixed[[i]]), sample_number=n_year, no_boot = 100,
  #                                         no_core=(detectCores()-2),K_val = NULL,prediction_method = "sieve_bootstrap"
  #                                         ,selection_ncomp_porder="CPV_AICC",method_pred = "Bosq",percent_CPV=0.90)
  print(i)
}

Emp_cov_0.85_means<-cbind(Emp_cov_male_0.85_means[,c(1:4,7:8)],Emp_cov_female_0.85_means[,c(1:4,7:8)])
# Emp_cov_0.90<-cbind(Emp_cov_male_0.90[,c(1:4,7:8)],Emp_cov_female_0.90[,c(1:4,7:8)])
Emp_cov_USA_means<-Emp_cov_0.85_means
colnames(Emp_cov_USA_means) = c("Pointwise 80% coverage", "Pointwise 95% coverage",
                                  "80% interval score", "95% interval score",
                                  "CPD Pointwise 80% coverage","CPD Pointwise 95% coverage",
                                  "Pointwise 80% coverage", "Pointwise 95% coverage",
                                  "80% interval score", "95% interval score",
                                  "CPD Pointwise 80% coverage","CPD Pointwise 95% coverage")

rownames(Emp_cov_USA_means)<-names_states
saveRDS(Emp_cov_USA_means,"Emp_cov_USA_means.rds")

# write a file
library("openxlsx")
write.xlsx(as.data.frame(Emp_cov_USA_means),file="~/My Drive/Spring 2023/STAT 397/PhD project 4/Results/Emp_cov_USA_means.xlsx",colNames=T,rownames=T)

