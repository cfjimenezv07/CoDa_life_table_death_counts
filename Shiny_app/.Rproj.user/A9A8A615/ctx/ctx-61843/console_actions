{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"./Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "# USA based on static FPCA",
        "> ",
        "# Set a working directory",
        "> ",
        "setwd(\"~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/\")",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"./Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "\nRestarting R session...\n\n",
        "> ",
        "setwd(\"~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes\")",
        "Registered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n",
        "> ",
        "",
        "> ",
        "# USA based on static FPCA",
        "> ",
        "# Set a working directory",
        "> ",
        "setwd(\"~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/\")",
        "> ",
        "#Library",
        "> ",
        "library(freqdom.fda)",
        "Loading required package: mvtnorm\n",
        "Loading required package: fda\n",
        "Loading required package: splines\n",
        "Loading required package: fds\n",
        "Loading required package: rainbow\n",
        "Loading required package: MASS\n",
        "Loading required package: pcaPP\n",
        "Loading required package: RCurl\n",
        "Loading required package: deSolve\n",
        "\nAttaching package: ‘fda’\n\n",
        "The following object is masked from ‘package:graphics’:\n\n    matplot\n\n",
        "Loading required package: freqdom\n",
        "Loading required package: matrixcalc\n",
        "\nAttaching package: ‘freqdom’\n\n",
        "The following object is masked from ‘package:base’:\n\n    %*%\n\n",
        "> ",
        "packages <- c(\"generics\", \"demography\", \"forecast\",\"fda\",\"fdaoutlier\", ",
        "+ ",
        "              \"rlist\", \"mrfDepth\",\"ftsa\",\"rainbow\")",
        "> ",
        "## Now load or install&load all",
        "> ",
        "package_check <- lapply(",
        "+ ",
        "  packages,",
        "+ ",
        "  FUN <- function(x) {",
        "+ ",
        "    if (!require(x, character.only = TRUE)) {",
        "+ ",
        "      install.packages(x, dependencies = TRUE)",
        "+ ",
        "      library(x, character.only = TRUE)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        ")",
        "Loading required package: generics\n",
        "\nAttaching package: ‘generics’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, setequal,\n    union\n\n",
        "Loading required package: demography\n",
        "Loading required package: forecast\n",
        "\nAttaching package: ‘forecast’\n\n",
        "The following object is masked from ‘package:fda’:\n\n    fourier\n\n",
        "Registered S3 methods overwritten by 'demography':\n  method      from \n  print.lca   e1071\n  summary.lca e1071\n",
        "This is demography 2.0 \n\n",
        "Loading required package: fdaoutlier\n",
        "Loading required package: rlist\n",
        "Loading required package: mrfDepth\n",
        "Loading required package: ggplot2\n",
        "Loading required package: ftsa\n",
        "Loading required package: sde\n",
        "Loading required package: stats4\n",
        "Loading required package: zoo\n",
        "\nAttaching package: ‘zoo’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\n",
        "sde 2.0.18\n",
        "Companion package to the book\n",
        "‘Simulation and Inference for Stochastic Differential Equations With R Examples’\n",
        "Iacus, Springer NY, (2008)\n",
        "To check the errata corrige of the book, type vignette(\"sde.errata\")\n",
        "\nAttaching package: ‘ftsa’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    sd, var\n\n",
        "> ",
        "################################################################################",
        "> ",
        "# Dataset entries",
        "> ",
        "################################################################################",
        "> ",
        "dataset_entries<-readRDS(\"./Rcodes_paper/dataset_entries/USA/dataset_entries.rds\")",
        "> ",
        "year = dataset_entries[[1]]",
        "> ",
        "n_year = dataset_entries[[2]]",
        "> ",
        "age = dataset_entries[[3]]",
        "> ",
        "n_age = dataset_entries[[4]]",
        "> ",
        "n_prefectures=dataset_entries[[5]]",
        "> ",
        "# Row partition",
        "> ",
        "part_list = list()",
        "> ",
        "for(ik in 1:n_prefectures) {",
        "+ ",
        "  part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)",
        "+ ",
        "}",
        "> ",
        "#Column partition",
        "> ",
        "n_populations=2",
        "> ",
        "part_list_c = list()",
        "> ",
        "for(ik in 1:n_populations) {",
        "+ ",
        "  part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)",
        "+ ",
        "}",
        "> ",
        "################################################################################",
        "> ",
        "# Datasets ",
        "> ",
        "################################################################################",
        "> ",
        "# USA",
        "> ",
        "names_states_USA <- readRDS(\"./Rcodes_paper/names_states/USA/names_states.rds\")",
        "> ",
        "USA_male <- readRDS(\"./Rcodes_paper/datasets/USA/USA_male.rds\")",
        "> ",
        "USA_female <- readRDS(\"./Rcodes_paper/datasets/USA/USA_female.rds\")",
        "> ",
        "all_male<-t(list.cbind(USA_male))",
        "> ",
        "all_female<-t(list.cbind(USA_female))",
        "> ",
        "################################################################################",
        "> ",
        "#Functional median polish decomposition and residuals",
        "> ",
        "################################################################################",
        "> ",
        "library(\"ftsa\")",
        "> ",
        "Y=cbind(all_male,all_female)",
        "> ",
        "Both<-ftsa::Two_way_median_polish(Y,year,age,n_prefectures,n_populations)",
        "Iteration= 1 \nSum = 5151 \nIteration= 2 \nSum = 32.09625 \nIteration= 3 \nSum = 70.25659 \nIteration= 4 \nSum = -4.344438 \n",
        "> ",
        "Residuals<- ftsa::Two_way_Residuals(Y,n_prefectures,year,age,n_populations)",
        "Iteration= 1 \nSum = 5151 \nIteration= 2 \nSum = 32.09625 \nIteration= 3 \nSum = 70.25659 \nIteration= 4 \nSum = -4.344438 \n",
        "> ",
        "Res1=Residuals$residuals1",
        "> ",
        "Res2=Residuals$residuals2",
        "> ",
        "Residuals_<-cbind(Res1,Res2)",
        "> ",
        "# Reconstructed data",
        "> ",
        "RR<-Residuals$rd #Matrix with the original data reconstructed from the FMP decomposition",
        "> ",
        "#  It's the proof of the reconstruction of the residuals. ",
        "> ",
        "Residuals$R #The result should be a vector with two entries TRUE, TRUE.",
        "[1] TRUE TRUE\n",
        "> ",
        "#Indicating that after adding both deterministic and time-varying components the FTS are recovered.",
        "> ",
        "Fixed_part<-Residuals$Fixed_comp # deterministic components to be added up after forecasting",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"PF_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "# USA based on static FPCA",
        "> ",
        "# Set a working directory",
        "> ",
        "setwd(\"~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/\")",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"./Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"Point_forecasting_cov.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "###############################################################################",
        "> ",
        "# Computation of the point forecast based on the FMP decomposition",
        "> ",
        "################################################################################",
        "> ",
        "library(ftsa)",
        "> ",
        "library(demography)",
        "> ",
        "source(\"forecast_Arima.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_Arima.R': No such file or directory\n",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts",
        "> ",
        "################################################################################",
        "> ",
        "source(\"Point_forecasting_cov.R\")",
        "Loading required package: iterators\n",
        "Loading required package: parallel\n",
        "> ",
        "cl <- makePSOCKcluster(detectCores()-2)",
        "> ",
        "registerDoParallel(cl)",
        "> ",
        "forecasted_curves_triangular_rolling <- foreach(i = 1:n_prefectures, .packages = c(\"ftsa\")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_)",
        "> ",
        "cl <- makePSOCKcluster(detectCores()-2)",
        "> ",
        "registerDoParallel(cl)",
        "> ",
        "forecasted_curves_triangular_rolling_static <- foreach(i = 1:n_prefectures, .packages = c(\"ftsa\")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_)",
        "> ",
        "stopCluster(cl)",
        "> ",
        "source(\"forecast_errors.R\")",
        "Error in file(filename, \"r\", encoding = encoding) : \n  cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(filename, \"r\", encoding = encoding) :",
        "\n ",
        " cannot open file 'forecast_errors.R': No such file or directory\n",
        "> ",
        "max_h=10",
        "> ",
        "mape <- function(forecast, true)",
        "+ ",
        "{",
        "+ ",
        "  if (length(forecast) != length(true))",
        "+ ",
        "    stop(\"MAPE: the lengths of input vectors must be the same.\")",
        "+ ",
        "  err = mean(100 * abs((true - forecast) / true))",
        "+ ",
        "  return(round(err, 6))",
        "+ ",
        "}",
        "> ",
        "rmspe <- function(forecast, true)",
        "+ ",
        "{",
        "+ ",
        "  if (length(forecast) != length(true))",
        "+ ",
        "    stop(\"RMSPE: the lengths of input vectors must be the same.\")",
        "+ ",
        "  err = sqrt(mean((100 * (true - forecast) / true)^2))",
        "+ ",
        "  return(round(err, 6))",
        "+ ",
        "}",
        "> ",
        "max_h=10",
        "> ",
        "error_MAPE_male<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "error_RMSPE_male<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "error_MAPE_female<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "error_RMSPE_female<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "male<-Y[,1:n_age]",
        "> ",
        "female<-Y[,(n_age+1):(2*n_age)]",
        "> ",
        "for (i in 1:n_prefectures) {",
        "+ ",
        "  forecasted_pref_male=forecasted_curves_triangular_rolling[[i]][1:n_age,]",
        "+ ",
        "  forecasted_pref_female=forecasted_curves_triangular_rolling[[i]][(n_age+1):(2*n_age),]",
        "+ ",
        "  True_pop_male=t(male[(n_year*i-(max_h-1)):(n_year*i),])",
        "+ ",
        "  True_pop_female=t(female[(n_year*i-(max_h-1)):(n_year*i),])",
        "+ ",
        "  for (j in 1:max_h) {",
        "+ ",
        "    error_MAPE_male[j,i]<-mape(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])",
        "+ ",
        "    error_RMSPE_male[j,i]<-rmspe(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])",
        "+ ",
        "    error_MAPE_female[j,i]<-mape(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])",
        "+ ",
        "    error_RMSPE_female[j,i]<-rmspe(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])",
        "+ ",
        "    ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "}",
        "Error in forecasted_curves_triangular_rolling : \n  object 'forecasted_curves_triangular_rolling' not found\n",
        "> ",
        "saveRDS(forecasted_curves_triangular_rolling_static,\"forecasted_curves_triangular_rolling_USA_static.rds\")",
        "> ",
        "max_h=10",
        "> ",
        "error_MAPE_male<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "error_RMSPE_male<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "error_MAPE_female<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "error_RMSPE_female<-matrix(0,nrow=max_h,ncol = n_prefectures)",
        "> ",
        "male<-Y[,1:n_age]",
        "> ",
        "female<-Y[,(n_age+1):(2*n_age)]",
        "> ",
        "for (i in 1:n_prefectures) {",
        "+ ",
        "  forecasted_pref_male=forecasted_curves_triangular_rolling_static[[i]][1:n_age,]",
        "+ ",
        "  forecasted_pref_female=forecasted_curves_triangular_rolling_static[[i]][(n_age+1):(2*n_age),]",
        "+ ",
        "  True_pop_male=t(male[(n_year*i-(max_h-1)):(n_year*i),])",
        "+ ",
        "  True_pop_female=t(female[(n_year*i-(max_h-1)):(n_year*i),])",
        "+ ",
        "  for (j in 1:max_h) {",
        "+ ",
        "    error_MAPE_male[j,i]<-mape(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])",
        "+ ",
        "    error_RMSPE_male[j,i]<-rmspe(forecast=forecasted_pref_male[,j], true=True_pop_male[,j])",
        "+ ",
        "    error_MAPE_female[j,i]<-mape(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])",
        "+ ",
        "    error_RMSPE_female[j,i]<-rmspe(forecast=forecasted_pref_female[,j], true=True_pop_female[,j])",
        "+ ",
        "    ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "All_errors_rolling<-list(error_MAPE_male,error_MAPE_female,",
        "+ ",
        "                         error_RMSPE_male,error_RMSPE_female)",
        "> ",
        "Errors_mean_rolling<-matrix(0,nrow=n_prefectures,ncol=length(All_errors_rolling))",
        "> ",
        "Errors_sd_rolling<-matrix(0,nrow=n_prefectures,ncol=length(All_errors_rolling))",
        "> ",
        "for (i in 1:length(All_errors_rolling)) {",
        "+ ",
        "  error=All_errors_rolling[[i]]",
        "+ ",
        "  Errors_mean_rolling[,i]=apply( error,2,mean)",
        "+ ",
        "  Errors_sd_rolling[,i]=apply( error,2,sd)",
        "+ ",
        "}",
        "> ",
        "colnames(Errors_mean_rolling)<-c(\"MAPE_male\",\"MAPE_female\",\"RMSPE_male\",\"RMSPE_female\")",
        "> ",
        "colnames(Errors_sd_rolling)<-c(\"MAPE_male\",\"MAPE_female\",\"RMSPE_male\",\"RMSPE_female\")",
        "> ",
        "rownames(Errors_mean_rolling)<-names_states",
        "Error: object 'names_states' not found\n",
        "> ",
        "rownames(Errors_sd_rolling)<-names_states",
        "Error: object 'names_states' not found\n",
        "> ",
        "rownames(Errors_mean_rolling)<-names_states_USA",
        "> ",
        "rownames(Errors_sd_rolling)<-names_states_USA",
        "> ",
        "saveRDS(Errors_mean_rolling,\"Errors_mean_rolling_USA_static.rds\")",
        "> ",
        "# saveRDS(Errors_mean_rolling,\"Errors_mean_rolling_USA_static.rds\")",
        "> ",
        "boxplot(Errors_mean_rolling)",
        "\nRestarting R session...\n\n"
    ]
}