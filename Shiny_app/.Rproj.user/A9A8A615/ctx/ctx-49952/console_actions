{
    "type": [
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "Registered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n",
        "> ",
        "#1. This scripts can be easily incorporated to the other two data sets (France and Japan)",
        "> ",
        "# by simply changing the data set entries and the data.",
        "> ",
        "# changing the folder name (France or Japan). e.g., ./dataset_entries/France/",
        "> ",
        "packages <- c(\"generics\", \"demography\", \"forecast\",\"fda\",\"fdaoutlier\", ",
        "+ ",
        "              \"rlist\", \"mrfDepth\",\"ftsa\",\"rainbow\")",
        "> ",
        "## Now load or install&load all",
        "> ",
        "package_check <- lapply(",
        "+ ",
        "  packages,",
        "+ ",
        "  FUN <- function(x) {",
        "+ ",
        "    if (!require(x, character.only = TRUE)) {",
        "+ ",
        "      install.packages(x, dependencies = TRUE)",
        "+ ",
        "      library(x, character.only = TRUE)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        ")",
        "Loading required package: generics\n",
        "\nAttaching package: ‘generics’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.difftime, as.factor, as.ordered, intersect, is.element, setdiff,\n    setequal, union\n\n",
        "Loading required package: demography\n",
        "Loading required package: forecast\n",
        "Registered S3 methods overwritten by 'demography':\n  method      from \n  print.lca   e1071\n  summary.lca e1071\n",
        "This is demography 2.0 \n\n",
        "Loading required package: fda\n",
        "Loading required package: splines\n",
        "Loading required package: fds\n",
        "Loading required package: rainbow\n",
        "Loading required package: MASS\n",
        "Loading required package: pcaPP\n",
        "Loading required package: RCurl\n",
        "Loading required package: deSolve\n",
        "\nAttaching package: ‘fda’\n\n",
        "The following object is masked from ‘package:forecast’:\n\n    fourier\n\n",
        "The following object is masked from ‘package:graphics’:\n\n    matplot\n\n",
        "Loading required package: fdaoutlier\n",
        "Loading required package: rlist\n",
        "Loading required package: mrfDepth\n",
        "Loading required package: ggplot2\n",
        "Loading required package: ftsa\n",
        "Loading required package: sde\n",
        "Loading required package: stats4\n",
        "Loading required package: zoo\n",
        "\nAttaching package: ‘zoo’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\n",
        "sde 2.0.18\n",
        "Companion package to the book\n",
        "‘Simulation and Inference for Stochastic Differential Equations With R Examples’\n",
        "Iacus, Springer NY, (2008)\n",
        "To check the errata corrige of the book, type vignette(\"sde.errata\")\n",
        "\nAttaching package: ‘ftsa’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    sd, var\n\n",
        "> ",
        "################################################################################",
        "> ",
        "# Data set entries",
        "> ",
        "################################################################################",
        "> ",
        "dataset_entries<-readRDS(\"./dataset_entries/USA/dataset_entries.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './dataset_entries/USA/dataset_entries.rds', probable reason 'No such file or directory'\n",
        "> ",
        "year = dataset_entries[[1]]",
        "Error: object 'dataset_entries' not found\n",
        "> ",
        "n_year = dataset_entries[[2]]",
        "Error: object 'dataset_entries' not found\n",
        "> ",
        "age = dataset_entries[[3]]",
        "Error: object 'dataset_entries' not found\n",
        "> ",
        "n_age = dataset_entries[[4]]",
        "Error: object 'dataset_entries' not found\n",
        "> ",
        "n_prefectures=dataset_entries[[5]]",
        "Error: object 'dataset_entries' not found\n",
        "> ",
        "# Row partition",
        "> ",
        "part_list = list()",
        "> ",
        "for(ik in 1:n_prefectures) {",
        "+ ",
        "  part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)",
        "+ ",
        "}",
        "Error in n_prefectures : object 'n_prefectures' not found\n",
        "> ",
        "#Column partition",
        "> ",
        "n_populations=2",
        "> ",
        "part_list_c = list()",
        "> ",
        "for(ik in 1:n_populations) {",
        "+ ",
        "  part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)",
        "+ ",
        "}",
        "Error in n_age : object 'n_age' not found\n",
        "> ",
        "remove_zeroes <- function(data_raw,n_prefectures,n_year,n_age) {",
        "+ ",
        "  N       <- n_prefectures",
        "+ ",
        "  T       <- n_year",
        "+ ",
        "  age_max <- n_age",
        "+ ",
        "  ",
        "+ ",
        "  data_nozero <- list()",
        "+ ",
        "  for(i in 1:N) {",
        "+ ",
        "    data_nozero[[i]] <- matrix(data_raw[[i]],age_max,T)",
        "+ ",
        "  }",
        "+ ",
        "  for(i in 1:N) {",
        "+ ",
        "    for(j in 2:age_max) {#For j=1, the two zeroes have been removed before",
        "+ ",
        "      for(k in 1:T){ ",
        "+ ",
        "        if(data_nozero[[i]][j,k]==-Inf){",
        "+ ",
        "          data_nozero[[i]][j,k] <- data_nozero[[i]][j-1,k]",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  return(data_nozero)",
        "+ ",
        "}",
        "> ",
        "names_states <- readRDS(\"./names_states/USA/names_states.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './names_states/USA/names_states.rds', probable reason 'No such file or directory'\n",
        "> ",
        "################################################################################",
        "> ",
        "# Data set ",
        "> ",
        "################################################################################",
        "> ",
        "USA_male <- readRDS(\"./datasets/USA/USA_male.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './datasets/USA/USA_male.rds', probable reason 'No such file or directory'\n",
        "> ",
        "USA_female <- readRDS(\"./datasets/USA/USA_female.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './datasets/USA/USA_female.rds', probable reason 'No such file or directory'\n",
        "> ",
        "# Remove the zeros in the datasets",
        "> ",
        "USA_male   <-remove_zeroes(data_raw=USA_male,n_prefectures,n_year,n_age) ",
        "Error in remove_zeroes(data_raw = USA_male, n_prefectures, n_year, n_age) : \n  object 'n_prefectures' not found\n",
        "> ",
        "USA_female <-remove_zeroes(data_raw=USA_female,n_prefectures,n_year,n_age)",
        "Error in remove_zeroes(data_raw = USA_female, n_prefectures, n_year, n_age) : \n  object 'n_prefectures' not found\n",
        "> ",
        "################################################################################",
        "> ",
        "# Data set entries",
        "> ",
        "################################################################################",
        "> ",
        "dataset_entries<-readRDS(\"./dataset_entries/USA/dataset_entries.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './dataset_entries/USA/dataset_entries.rds', probable reason 'No such file or directory'\n",
        "> ",
        "setwd(\"~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/\")",
        "> ",
        "setwd(\"~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/\")",
        "> ",
        "################################################################################",
        "> ",
        "# Data set entries",
        "> ",
        "################################################################################",
        "> ",
        "dataset_entries<-readRDS(\"./dataset_entries/USA/dataset_entries.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './dataset_entries/USA/dataset_entries.rds', probable reason 'No such file or directory'\n",
        "> ",
        "year = dataset_entries[[1]]",
        "Error: object 'dataset_entries' not found\n",
        "> ",
        "################################################################################",
        "> ",
        "# Data set entries",
        "> ",
        "################################################################################",
        "> ",
        "dataset_entries<-readRDS(\"./Rcodes_paper/dataset_entries/USA/dataset_entries.rds\")",
        "> ",
        "year = dataset_entries[[1]]",
        "> ",
        "n_year = dataset_entries[[2]]",
        "> ",
        "age = dataset_entries[[3]]",
        "> ",
        "n_age = dataset_entries[[4]]",
        "> ",
        "n_prefectures=dataset_entries[[5]]",
        "> ",
        "# Row partition",
        "> ",
        "part_list = list()",
        "> ",
        "for(ik in 1:n_prefectures) {",
        "+ ",
        "  part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)",
        "+ ",
        "}",
        "> ",
        "#Column partition",
        "> ",
        "n_populations=2",
        "> ",
        "part_list_c = list()",
        "> ",
        "for(ik in 1:n_populations) {",
        "+ ",
        "  part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)",
        "+ ",
        "}",
        "> ",
        "remove_zeroes <- function(data_raw,n_prefectures,n_year,n_age) {",
        "+ ",
        "  N       <- n_prefectures",
        "+ ",
        "  T       <- n_year",
        "+ ",
        "  age_max <- n_age",
        "+ ",
        "  ",
        "+ ",
        "  data_nozero <- list()",
        "+ ",
        "  for(i in 1:N) {",
        "+ ",
        "    data_nozero[[i]] <- matrix(data_raw[[i]],age_max,T)",
        "+ ",
        "  }",
        "+ ",
        "  for(i in 1:N) {",
        "+ ",
        "    for(j in 2:age_max) {#For j=1, the two zeroes have been removed before",
        "+ ",
        "      for(k in 1:T){ ",
        "+ ",
        "        if(data_nozero[[i]][j,k]==-Inf){",
        "+ ",
        "          data_nozero[[i]][j,k] <- data_nozero[[i]][j-1,k]",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  return(data_nozero)",
        "+ ",
        "}",
        "> ",
        "names_states <- readRDS(\"./names_states/USA/names_states.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './names_states/USA/names_states.rds', probable reason 'No such file or directory'\n",
        "> ",
        "################################################################################",
        "> ",
        "# Data set ",
        "> ",
        "################################################################################",
        "> ",
        "USA_male <- readRDS(\"./datasets/USA/USA_male.rds\")",
        "Error in gzfile(file, \"rb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"rb\") :",
        "\n ",
        " cannot open compressed file './datasets/USA/USA_male.rds', probable reason 'No such file or directory'\n",
        "> ",
        "names_states <- readRDS(\"./Rcodes_paper/names_states/USA/names_states.rds\")",
        "> ",
        "################################################################################",
        "> ",
        "# Dataset ",
        "> ",
        "################################################################################",
        "> ",
        "USA_male <- readRDS(\"./Rcodes_paper/datasets/USA/USA_male.rds\")",
        "> ",
        "USA_female <- readRDS(\"./Rcodes_paper/datasets/USA/USA_female.rds\")",
        "> ",
        "# Remove the zeros in the datasets",
        "> ",
        "USA_male   <-remove_zeroes(data_raw=USA_male,n_prefectures,n_year,n_age) ",
        "> ",
        "USA_female <-remove_zeroes(data_raw=USA_female,n_prefectures,n_year,n_age)",
        "> ",
        "all_male<-t(list.cbind(USA_male))",
        "> ",
        "all_female<-t(list.cbind(USA_female))",
        "> ",
        "########################################################################",
        "> ",
        "# Comparison with the functional mean ANOVA approach (FM-ANOVA)",
        "> ",
        "########################################################################",
        "> ",
        "# source(\"FM-ANOVA_decomposition.R\")",
        "> ",
        "# This function computes the functional mean ANOVA decomposition based on means",
        "> ",
        "FANOVA_means<-ftsa::FANOVA(data_pop1=t(all_male),data_pop2=t(all_female),year,age,n_prefectures,n_populations)",
        "> ",
        "#This function computes the functional residuals after removing the deterministic components",
        "> ",
        "# obtained from the FANOVA function.",
        "> ",
        "Residuals_means<-ftsa::Two_way_Residuals_means(data_pop1=t(all_male),data_pop2=t(all_female),",
        "+ ",
        "                                               year,age,n_prefectures,n_populations)",
        "> ",
        "Res1_means=Residuals_means$residuals1_mean",
        "> ",
        "Res2_means=Residuals_means$residuals2_mean",
        "> ",
        "Residuals_mean<-cbind(Res1_means,Res2_means)",
        "> ",
        "# Reconstructed data",
        "> ",
        "RR<-Residuals_means$rd #Matrix with the original data reconstructed from the FMP decomposition",
        "> ",
        "#  It's the proof of the reconstruction of the residuals. ",
        "> ",
        "Residuals_means$R #The result should be a vector with two entries TRUE, TRUE.",
        "[1] TRUE TRUE\n",
        "> ",
        "#Indicating that after adding both deterministic and time-varying components the FTS are recovered.",
        "> ",
        "Fixed_part_means<-Residuals_means$Fixed_comp_mean # deterministic components to be added up after forecasting",
        "> ",
        "################################################################################",
        "> ",
        "# Computation of the point forecasts based on functional mean ANOVA (FM-ANOVA)",
        "> ",
        "################################################################################",
        "> ",
        "source(\"New_Point_forecast.R\")",
        "Loading required package: iterators\n",
        "Loading required package: parallel\n",
        "> ",
        "cl <- makePSOCKcluster(detectCores()-2)",
        "> ",
        "registerDoParallel(cl)",
        "> ",
        "forecasted_curves_triangular_rolling_USA_FM_VAR <- foreach(i = 1:n_prefectures, .packages = c(\"ftsa\")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_,est_method = \"lrc\",prediction_method=\"VAR\")",
        "Error in ForecastC(i, fixed_com = Fixed_part, Residuals_f = Residuals_,  : \n  task 1 failed - \"object 'Residuals_' not found\"\n",
        "> ",
        "stopCluster(cl)",
        "> ",
        "cl <- makePSOCKcluster(detectCores()-2)",
        "> ",
        "registerDoParallel(cl)",
        "> ",
        "forecasted_curves_triangular_rolling_USA_FM_VAR <- foreach(i = 1:n_prefectures, .packages = c(\"ftsa\")) %dopar% ForecastC(i,fixed_com=Fixed_part_means,Residuals_f=Residuals_mean,est_method = \"lrc\",prediction_method=\"VAR\")",
        "Error in ForecastC(i, fixed_com = Fixed_part_means, Residuals_f = Residuals_mean,  : \n  task 28 failed - \"Lapack routine dgesv: system is exactly singular: U[1,1] = 0\"\n",
        "> ",
        "fixed_com=Fixed_part_means",
        "> ",
        "dim(fixed_com)",
        "[1] 3162  202\n",
        "> ",
        "Residuals_f=Residuals_mean",
        "> ",
        "dim(fixed_com)",
        "[1] 3162  202\n",
        "> ",
        "est_method = \"lrc\"",
        "> ",
        "prediction_method=\"VAR\"",
        "> ",
        "i",
        "Error: object 'i' not found\n",
        "> ",
        "i",
        "Error: object 'i' not found\n",
        "> ",
        "i=§",
        "Error: unexpected input in \"i=§\"\n",
        "> ",
        "i=1",
        "> ",
        "  pref=(n_year * i - (n_year - 1)):(n_year * i)",
        "> ",
        "  forecasted_prefecture <- matrix(0, nrow = n_age * 2, ncol = max_h)",
        "> ",
        "  for (k in 1:max_h) {",
        "+ ",
        "    pref_k<-pref[1:(n_year-max_h-1+k)]",
        "+ ",
        "    frc=Pref_forecast_curves(fixed_com=fixed_com[pref_k,],",
        "+ ",
        "                             Residuals_f=Residuals_f[pref_k,],",
        "+ ",
        "                             est_method = est_method,",
        "+ ",
        "                             fh = k, PI = NULL, B = 1000,prediction_method)",
        "+ ",
        "    forecasted_prefecture[,k]=frc$med_polish_curve_forecast[,1]",
        "+ ",
        "  }",
        "> ",
        "  forecasted_prefecture <- matrix(0, nrow = n_age * 2, ncol = max_h)",
        "> ",
        "  for (k in 1:max_h) {",
        "+ ",
        "    pref_k<-pref[1:(n_year-max_h-1+k)]",
        "+ ",
        "    frc=Pref_forecast_curves(fixed_com=fixed_com[pref_k,],",
        "+ ",
        "                             Residuals_f=Residuals_f[pref_k,],",
        "+ ",
        "                             est_method = est_method,",
        "+ ",
        "                             fh = k, PI = NULL, B = 1000,prediction_method)",
        "+ ",
        "    forecasted_prefecture[,k]=frc$med_polish_curve_forecast[,1]",
        "+ ",
        "    print(k)",
        "+ ",
        "  }",
        "[1] 1\n[1] 2\n[1] 3\n",
        "> ",
        "  forecasted_prefecture <- matrix(0, nrow = n_age * 2, ncol = max_h)",
        "> ",
        "  for (k in 1:max_h) {",
        "+ ",
        "    pref_k <- pref[k:(n_year - max_h - 1 + k)]",
        "+ ",
        "    frc <- Pref_forecast_curves(fixed_com = fixed_com[pref_k, ],",
        "+ ",
        "                                Residuals_f = Residuals_f[pref_k, ],",
        "+ ",
        "                                est_method = est_method,",
        "+ ",
        "                                fh = 1, PI = NULL, B = 1000, prediction_method=prediction_method)",
        "+ ",
        "    forecasted_prefecture[ , k] = frc$med_polish_curve_forecast",
        "+ ",
        "    # print(k)",
        "+ ",
        "  }",
        "> ",
        "  forecasted_prefecture <- matrix(0, nrow = n_age * 2, ncol = max_h)",
        "> ",
        "  for (k in 1:max_h) {",
        "+ ",
        "    pref_k <- pref[k:(n_year - max_h - 1 + k)]",
        "+ ",
        "    frc <- Pref_forecast_curves(fixed_com = fixed_com[pref_k, ],",
        "+ ",
        "                                Residuals_f = Residuals_f[pref_k, ],",
        "+ ",
        "                                est_method = est_method,",
        "+ ",
        "                                fh = 1, PI = NULL, B = 1000, prediction_method=prediction_method)",
        "+ ",
        "    forecasted_prefecture[ , k] = frc$med_polish_curve_forecast",
        "+ ",
        "    print(k)",
        "+ ",
        "  }",
        "[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n",
        "> ",
        "i=2",
        "> ",
        "i=15",
        "> ",
        "  pref=(n_year * i - (n_year - 1)):(n_year * i)",
        "> ",
        "  forecasted_prefecture <- matrix(0, nrow = n_age * 2, ncol = max_h)",
        "> ",
        "  for (k in 1:max_h) {",
        "+ ",
        "    pref_k <- pref[k:(n_year - max_h - 1 + k)]",
        "+ ",
        "    frc <- Pref_forecast_curves(fixed_com = fixed_com[pref_k, ],",
        "+ ",
        "                                Residuals_f = Residuals_f[pref_k, ],",
        "+ ",
        "                                est_method = est_method,",
        "+ ",
        "                                fh = 1, PI = NULL, B = 1000, prediction_method=prediction_method)",
        "+ ",
        "    forecasted_prefecture[ , k] = frc$med_polish_curve_forecast",
        "+ ",
        "    print(k)",
        "+ ",
        "  }",
        "[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\nRestarting R session...\n\n"
    ]
}