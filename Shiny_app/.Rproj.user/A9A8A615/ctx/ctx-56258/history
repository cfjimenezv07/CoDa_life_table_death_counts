med_polish_resi_eigen = eigen(med_polish_resi_lrc)
# determine retained number of components via eigenvalue ratio
ret_component = vector("numeric", length(med_polish_resi_eigen$values) - 1)
for(ik in 1:(length(med_polish_resi_eigen$values) - 1)){
ret_component[ik] = med_polish_resi_eigen$values[ik+1]/med_polish_resi_eigen$values[ik]
}
retain_component = which.min(ret_component)
retain_component
dim(Residuals_f)
dim(med_polish_resi_lrc)
# determine 1st set of basis function and its scores
med_polish_resi_basis = as.matrix(med_polish_resi_eigen$vectors[,1:retain_component])
med_polish_resi_score = crossprod(med_polish_resi, med_polish_resi_basis)
dim(med_polish_resi_score)
dim(med_polish_resi_score)[2]
fts(1:dim(med_polish_resi_score)[2], med_polish_resi_score)
1:dim(med_polish_resi_score)[2]
n_col=dim(med_polish_resi_score)[2]
n_col
fts(1:n_col, med_polish_resi_score)
colnames(med_polish_resi_score) <- 1:n_col
fts(1:n_col, med_polish_resi_score)
dim(med_polish_resi_score)
?fts
fts(1:n_col, med_polish_resi_score)
fts(1:n_col, t(med_polish_resi_score))
n_col=dim(med_polish_resi_score)[2]
rawnames(med_polish_resi_score) <- 1:n_col
n_col=dim(med_polish_resi_score)[2]
rownames(med_polish_resi_score) <- 1:n_col
dim(med_polish_resi_score)[2]
n_row=dim(med_polish_resi_score)[1]
n_row=dim(med_polish_resi_score)[1]
rownames(med_polish_resi_score) <- 1:n_row
fts(1:n_row, t(med_polish_resi_score))
dim(t(med_polish_resi_score))
1:n_row
fts(1:n_row, t(med_polish_resi_score))
dim(t(med_polish_resi_score))
fts(1:n_col, med_polish_resi_score)
1:n_col
dim(med_polish_resi_score)
dim(t(med_polish_resi_score))
fts(1:n_col, t(med_polish_resi_score))
dum = farforecast(object = fts(1:n_col, t(med_polish_resi_score)), h = fh, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
dim(med_polish_resi_score_forecast)
View(med_polish_resi_score_forecast)
med_polish_resi_forecast = med_polish_resi_basis %*% med_polish_resi_score_forecast
Fixed=t(fixed_com)[,1:fh]
med_polish_curve_forecast = med_polish_resi_forecast + Fixed
dim( med_polish_curve_forecast)
matplot( med_polish_curve_forecast,type='l')
View(med_polish_curve_forecast)
View(Fixed)
med_polish_resi_score_forecast_VAR=med_polish_resi_score_forecast
# obtain forecasts of PC scores via auto.arima
med_polish_resi_score_forecast = matrix(NA, retain_component, fh)
for(ik in 1:retain_component){
dum = forecast_Arima(object=auto.arima(med_polish_resi_score[,ik]), h = fh, bootstrap = TRUE, npaths = B)
med_polish_resi_score_forecast[ik,] = dum$mean
med_polish_resi_score_forecast_boot[ik,,] = t(dum$sim)
rm(ik); rm(dum)
}
###############################################################################
# Computation of the point forecast based on the FMP decomposition
################################################################################
library("demography")
source("forecast_Arima.R")
library("ftsa")
for(ik in 1:retain_component){
dum = forecast_Arima(object=auto.arima(med_polish_resi_score[,ik]), h = fh, bootstrap = TRUE, npaths = B)
med_polish_resi_score_forecast[ik,] = dum$mean
med_polish_resi_score_forecast_boot[ik,,] = t(dum$sim)
rm(ik); rm(dum)
}
# obtain forecasts of PC scores via auto.arima
med_polish_resi_score_forecast = matrix(NA, retain_component, fh)
med_polish_resi_score_forecast_boot = array(NA, dim = c(retain_component, fh, B))
for(ik in 1:retain_component){
dum = forecast_Arima(object=auto.arima(med_polish_resi_score[,ik]), h = fh, bootstrap = TRUE, npaths = B)
med_polish_resi_score_forecast[ik,] = dum$mean
med_polish_resi_score_forecast_boot[ik,,] = t(dum$sim)
rm(ik); rm(dum)
}
dim(med_polish_resi_score_forecast)
View(med_polish_resi_score_forecast)
View(med_polish_resi_score_forecast_VAR)
med_polish_resi_forecast = med_polish_resi_basis %*% med_polish_resi_score_forecast
Fixed=t(fixed_com)[,1:fh]
med_polish_curve_forecast = med_polish_resi_forecast + Fixed
matplot( med_polish_curve_forecast,type = "l")
A<-c(1,2,3)
B<-c(15,16,17)
C<- 1:10|15:25
C<-c(A,B)
C
C<-c(1:16,29:56)
C
length(C)
D=rbinom(1,44,0.56)
D
D=rbinom(44,44,0.56)
D
D=rbinom(44,1,0.56)
D
C[which(D==1)]
Pref_forecast_curves<-function(fixed_com,Residuals_f,
est_method = c("lrc", "cov"),
fh = 30, PI = NULL, B = 1000, prediction_method=c("ARIMA","VAR")){
med_polish_resi=t(Residuals_f)
if(est_method == "lrc"){
# estimate long-run covariance by kernel sandwich estimator
med_polish_resi_lrc = long_run_covariance_estimation(med_polish_resi)
}else if(est_method == "cov"){
# estimate empirical covariance function
med_polish_resi_lrc = cov(t(med_polish_resi))
}
# perform eigen-decomposition
med_polish_resi_eigen = eigen(med_polish_resi_lrc)
# determine retained number of components via eigenvalue ratio
ret_component = vector("numeric", length(med_polish_resi_eigen$values) - 1)
for(ik in 1:(length(med_polish_resi_eigen$values) - 1)){
ret_component[ik] = med_polish_resi_eigen$values[ik+1]/med_polish_resi_eigen$values[ik]
}
retain_component = which.min(ret_component)
# determine 1st set of basis function and its scores
med_polish_resi_basis = as.matrix(med_polish_resi_eigen$vectors[,1:retain_component])
med_polish_resi_score = crossprod(med_polish_resi, med_polish_resi_basis)
# obtain forecasts of PC scores via auto.arima
med_polish_resi_score_forecast = matrix(NA, retain_component, fh)
med_polish_resi_score_forecast_boot = array(NA, dim = c(retain_component, fh, B))
if(prediction_method=="ARIMA"){
for(ik in 1:retain_component){
dum = forecast_Arima(object=auto.arima(med_polish_resi_score[,ik]), h = fh, bootstrap = TRUE, npaths = B)
med_polish_resi_score_forecast[ik,] = dum$mean
med_polish_resi_score_forecast_boot[ik,,] = t(dum$sim)
rm(ik); rm(dum)
}
}else{
n_row=dim(med_polish_resi_score)[1]
rownames(med_polish_resi_score) <- 1:n_col
dum = farforecast(object = fts(1:n_col, t(med_polish_resi_score)), h = fh, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
}
med_polish_resi_forecast = med_polish_resi_basis %*% med_polish_resi_score_forecast
# add the fixed parts
Fixed=t(fixed_com)[,1:fh]
med_polish_curve_forecast = med_polish_resi_forecast + Fixed
return(list(med_polish_curve_forecast=med_polish_curve_forecast,
med_polish_resi_forecast=  med_polish_resi_forecast))
}
packages <- c("generics", "demography", "forecast","fda","fdaoutlier",
"rlist", "mrfDepth","ftsa","rainbow")
## Now load or install&load all
package_check <- lapply(
packages,
FUN <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
setwd("~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/")
################################################################################
# Dataset entries
################################################################################
dataset_entries<-readRDS("./Rcodes_paper/dataset_entries/USA/dataset_entries.rds")
year = dataset_entries[[1]]
n_year = dataset_entries[[2]]
age = dataset_entries[[3]]
n_age = dataset_entries[[4]]
n_prefectures=dataset_entries[[5]]
# Row partition
part_list = list()
for(ik in 1:n_prefectures) {
part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)
}
#Column partition
n_populations=2
part_list_c = list()
for(ik in 1:n_populations) {
part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)
}
remove_zeroes <- function(data_raw,n_prefectures,n_year,n_age) {
N       <- n_prefectures
T       <- n_year
age_max <- n_age
data_nozero <- list()
for(i in 1:N) {
data_nozero[[i]] <- matrix(data_raw[[i]],age_max,T)
}
for(i in 1:N) {
for(j in 2:age_max) {#For j=1, the two zeroes have been removed before
for(k in 1:T){
if(data_nozero[[i]][j,k]==-Inf){
data_nozero[[i]][j,k] <- data_nozero[[i]][j-1,k]
}
}
}
}
return(data_nozero)
}
names_states <- readRDS("./Rcodes_paper/names_states/USA/names_states.rds")
################################################################################
# Dataset
################################################################################
USA_male <- readRDS("./Rcodes_paper/datasets/USA/USA_male.rds")
USA_female <- readRDS("./Rcodes_paper/datasets/USA/USA_female.rds")
# Remove the zeros in the datasets
USA_male   <-remove_zeroes(data_raw=USA_male,n_prefectures,n_year,n_age)
USA_female <-remove_zeroes(data_raw=USA_female,n_prefectures,n_year,n_age)
all_male<-t(list.cbind(USA_male))
all_female<-t(list.cbind(USA_female))
################################################################################
#Functional median polish decomposition and residuals
################################################################################
# source("FMP-ANOVA_decomposition.R")
library("ftsa")
Y=cbind(all_male,all_female)
Both<-ftsa::Two_way_median_polish(Y,year,age,n_prefectures,n_populations)
Residuals<- ftsa::Two_way_Residuals(Y,n_prefectures,year,age,n_populations)
Res1=Residuals$residuals1
Res2=Residuals$residuals2
Residuals_<-cbind(Res1,Res2)
# Reconstructed data
RR<-Residuals$rd #Matrix with the original data reconstructed from the FMP decomposition
#  It's the proof of the reconstruction of the residuals.
Residuals$R #The result should be a vector with two entries TRUE, TRUE.
#Indicating that after adding both deterministic and time-varying components the FTS are recovered.
Fixed_part<-Residuals$Fixed_comp # deterministic components to be added up after forecasting
################################################################################
# Computation of the point forecasts
################################################################################
source("Point_forecasting.R")
################################################################################
# Computation of the point forecasts
################################################################################
source("New_Point_forecast.R")
cl <- makePSOCKcluster(detectCores()-2)
registerDoParallel(cl)
forecasted_curves_triangular_rolling_USA_FMP_VAR <- foreach(i = 1:n_prefectures, .packages = c("ftsa")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_,est_method = "lrc",prediction_method="VAR")
n_col=dim(med_polish_resi_score)[1]
cl <- makePSOCKcluster(detectCores()-2)
registerDoParallel(cl)
forecasted_curves_triangular_rolling_USA_FMP_VAR <- foreach(i = 1:n_prefectures, .packages = c("ftsa")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_,est_method = "lrc",prediction_method="VAR")
################################################################################
# Computation of the point forecasts
################################################################################
source("New_Point_forecast.R")
cl <- makePSOCKcluster(detectCores()-2)
registerDoParallel(cl)
forecasted_curves_triangular_rolling_USA_FMP_VAR <- foreach(i = 1:n_prefectures, .packages = c("ftsa")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_,est_method = "lrc",prediction_method="VAR")
#Example
pref=(n_year * 1 - (n_year - 1)):(n_year * 1)
pref_k <- pref[1:(n_year - 10 - 1 + 1)]
frc <- Pref_forecast_curves(fixed_com = Fixed_part[pref, ],
Residuals_f = Residuals_[pref, ],
est_method = "cov",
fh = 10, PI = NULL, B = 1000,prediction_method = "VAR")
dim(med_polish_resi_score)
fixed_com = Fixed_part[pref, ]
Residuals_f = Residuals_[pref, ]
dim(fixed_com)
med_polish_resi=t(Residuals_f)
# estimate long-run covariance by kernel sandwich estimator
med_polish_resi_lrc = long_run_covariance_estimation(med_polish_resi)
# perform eigen-decomposition
med_polish_resi_eigen = eigen(med_polish_resi_lrc)
# determine retained number of components via eigenvalue ratio
ret_component = vector("numeric", length(med_polish_resi_eigen$values) - 1)
for(ik in 1:(length(med_polish_resi_eigen$values) - 1)){
ret_component[ik] = med_polish_resi_eigen$values[ik+1]/med_polish_resi_eigen$values[ik]
}
retain_component = which.min(ret_component)
# determine 1st set of basis function and its scores
med_polish_resi_basis = as.matrix(med_polish_resi_eigen$vectors[,1:retain_component])
med_polish_resi_score = crossprod(med_polish_resi, med_polish_resi_basis)
dim(med_polish_resi_score)
n_col=dim(med_polish_resi_score)[1]
n_col
dim(t(med_polish_resi_score))
n_col=dim(med_polish_resi_score)[1]
rownames(med_polish_resi_score) <- 1:n_col
fts(1:n_col, t(med_polish_resi_score))
fts(1:n_col, (med_polish_resi_score))
dim((med_polish_resi_score))
n_col=dim(med_polish_resi_score)[2]
rownames(med_polish_resi_score) <- 1:n_col
fts(1:n_col, (med_polish_resi_score))
1:n_col
dim((med_polish_resi_score))
n_col=dim(med_polish_resi_score)[1]
rownames(med_polish_resi_score) <- 1:n_col
n_col=dim(med_polish_resi_score)[1]
rownames(med_polish_resi_score) <- 1:n_col
n_col=dim(med_polish_resi_score)[1]
colnames(med_polish_resi_score) <- 1:n_col
dim(med_polish_resi_score)[1]
n_col=dim(med_polish_resi_score)[1]
colnames(t(med_polish_resi_score)) <- 1:n_col
mat=t(med_polish_resi_score)
dim(mat)
n_col=dim(mat)[2]
colnames(mat) <- 1:n_col
fts(1:n_col, mat)
1:n_col
dim(mat)
fts(1:n_col, t(mat))
fts(1:n_col, t(med_polish_resi_score))
dim(med_polish_resi_score)
n_col
1:dim(mat)[1]
fts(1:dim(mat)[1],mat)
cl <- makePSOCKcluster(detectCores()-2)
registerDoParallel(cl)
forecasted_curves_triangular_rolling_USA_FMP_VAR <- foreach(i = 1:n_prefectures, .packages = c("ftsa")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_,est_method = "lrc",prediction_method="VAR")
################################################################################
# Computation of the point forecasts
################################################################################
source("New_Point_forecast.R")
################################################################################
# Computation of the point forecasts
################################################################################
source("New_Point_forecast.R")
################################################################################
# Computation of the point forecasts
################################################################################
source("New_Point_forecast.R")
cl <- makePSOCKcluster(detectCores()-2)
registerDoParallel(cl)
forecasted_curves_triangular_rolling_USA_FMP_VAR <- foreach(i = 1:n_prefectures, .packages = c("ftsa")) %dopar% ForecastC(i,fixed_com=Fixed_part,Residuals_f=Residuals_,est_method = "lrc",prediction_method="VAR")
i=1
fixed_com=Fixed_part
Residuals_f=Residuals_
est_method = "lrc"
prediction_method="VAR"
i
pref=(n_year * i - (n_year - 1)):(n_year * i)
forecasted_prefecture <- matrix(0, nrow = n_age * 2, ncol = max_h)
k=1
pref_k <- pref[k:(n_year - max_h - 1 + k)]
fixed_com = fixed_com[pref_k, ]
Residuals_f = Residuals_f[pref_k, ]
est_method = est_method
fh = 1
PI = NULL
B = 1000
prediction_method=prediction_method
med_polish_resi=t(Residuals_f)
# estimate long-run covariance by kernel sandwich estimator
med_polish_resi_lrc = long_run_covariance_estimation(med_polish_resi)
# perform eigen-decomposition
med_polish_resi_eigen = eigen(med_polish_resi_lrc)
# determine retained number of components via eigenvalue ratio
ret_component = vector("numeric", length(med_polish_resi_eigen$values) - 1)
for(ik in 1:(length(med_polish_resi_eigen$values) - 1)){
ret_component[ik] = med_polish_resi_eigen$values[ik+1]/med_polish_resi_eigen$values[ik]
}
retain_component = which.min(ret_component)
# determine 1st set of basis function and its scores
med_polish_resi_basis = as.matrix(med_polish_resi_eigen$vectors[,1:retain_component])
med_polish_resi_score = crossprod(med_polish_resi, med_polish_resi_basis)
# obtain forecasts of PC scores via auto.arima
med_polish_resi_score_forecast = matrix(NA, retain_component, fh)
med_polish_resi_score_forecast_boot = array(NA, dim = c(retain_component, fh, B))
mat=t(med_polish_resi_score)
dim( mat)
n_col=dim(mat)[2]
colnames(mat) <- 1:n_col
fts(1:dim(mat)[1],mat)
dum = farforecast(object = fts(1:dim(mat)[1],mat), h = fh, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
dim(med_polish_resi_score_forecast)
med_polish_resi_forecast = med_polish_resi_basis %*% med_polish_resi_score_forecast
Fixed=t(fixed_com)[,1:fh]
med_polish_curve_forecast = med_polish_resi_forecast + Fixed
dim(med_polish_curve_forecast)
plot(med_polish_curve_forecast,type='l')
plot(med_polish_curve_forecast,type='l')
med_polish_curve_forecast
med_polish_resi_score_forecast
dum = farforecast(object = fts(1:dim(mat)[1],mat), h = fh, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
med_polish_resi_score_forecast
object = fts(1:dim(mat)[1],mat)
object
object$y
class(object$y)
object$time
object$yname
object$xname
1:dim(mat)[1]
dum = farforecast(object = fts(1:dim(mat)[1],mat), h = fh, Dmax_value = 10, Pmax_value = 5)
dum$point_fore$y
fh
dim(mat)
?forecast
?farforecast
sqrt_pm10 = sqrt(pm_10_GR$y)
dim(sqrt_pm10)
length(seq(0, 23.5, by = 0.5))
multi_forecast_sqrt_pm10 = farforecast(object = fts(seq(0, 23.5, by = 0.5), sqrt_pm10),
h = 1, Dmax_value = 5, Pmax_value = 3)
multi_forecast_sqrt_pm10$point_fore$y
class
class(mat)
class(mat[1,1])
fts(1:dim(mat)[1],mat)
object = fts(1:dim(mat)[1],mat)
View(object$y)
dum = farforecast(object = fts(1:dim(mat)[1],mat), h = fh, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
med_polish_resi_score_forecast
Dmax_value = 10
Pmax_value = 5
order_select = method.FPE(object = object, D = Dmax_value,
var_type = var_type, Pmax = Pmax_value)
library(ftsa)
ftsa:order_select = method.FPE(object = object, D = Dmax_value,
var_type = var_type, Pmax = Pmax_value)
ftsa::order_select = method.FPE(object = object, D = Dmax_value,
var_type = var_type, Pmax = Pmax_value)
?method.FPE
FPE.trace <- ftsa:::FPE.trace
method.FPE <- function (object, D = 21, var_type = "none", Pmax)
{
eigen_values = eigen(var(t(object$y)))$values
vartot = sum(eigen_values)
pca.FTS = ftsm(object, order = D)
pca.FTS_scores = pca.FTS$coeff[, 2:(D + 1)]
values = matrix(NA, D, Pmax)
for (d in 1:D) {
scores = pca.FTS_scores[, 1:d]
var.explain = sum(eigen_values[1:d])
for (p in 1:Pmax) {
if (d == 1) {
res = as.matrix(arima(scores, order = c(p, 0, 0))$residuals)
}
else {
if (p == 0) {
mean = t(matrix(rep(colMeans(scores), nrow(scores)),
d))
res = scores - mean
}
else {
colnames(scores) <- as.character(seq(1:d))
res = resid(vars::VAR(scores, p = p, type = var_type))
}
}
values[d, p] = FPE.trace(res = res, p = p) +
vartot - var.explain
}
}
rownames(values) = 1:D
colnames(values) = 1:Pmax
hat.p = (which.min(values))%/%D + 1
hat.d = which.min(values)%%D
if (hat.d == 0)
hat.d = hat.d + D
out = c(hat.p, hat.d)
return(out)
}
order_select = method.FPE(object = object, D = Dmax_value,
var_type = var_type, Pmax = Pmax_value)
order = 3
ftsm_object = ftsm(y = object, order = order)
var_pred = predict(vars::VAR(ftsm_object$coeff[, 2:(order +
1)], p = order_select[1], type = var_type), n.ahead = h,
ci = level/100)
var_type = "const"
var_pred = predict(vars::VAR(ftsm_object$coeff[, 2:(order +
1)], p = order_select[1], type = var_type), n.ahead = h,
ci = level/100)
farforecast(object = fts(1:dim(mat)[1],mat), h = fh, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
med_polish_resi_score_forecast
dum = farforecast(object = fts(1:dim(mat)[1],mat), h = 10, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
med_polish_resi_score_forecast
View(med_polish_resi_score)
mean(med_polish_resi_score)
str(med_polish_resi_score)
dim(t(med_polish_resi_score))
dim(t(med_polish_resi_score))[1]
n_col=dim(t(med_polish_resi_score))[2]
1:n_col
n_col=dim(t(med_polish_resi_score))[2]
colnames(mat) <- 1:n_col
dum = farforecast(object = fts(1:dim(t(med_polish_resi_score))[1],t(med_polish_resi_score)), h = fh, Dmax_value = 10, Pmax_value = 5)
dim(t(med_polish_resi_score))[2]
n_col=dim(t(med_polish_resi_score))[2]
colnames(t(med_polish_resi_score)) <- 1:n_col
n_col=dim(t(med_polish_resi_score))[1]
colnames((med_polish_resi_score)) <- 1:n_col
n_col=dim(t(med_polish_resi_score))[2]
colnames(t(med_polish_resi_score)) = 1:n_col
n_col
dim(med_polish_resi_score)
rownames(med_polish_resi_score) = 1:n_col
n_col=dim(t(med_polish_resi_score))[2]
rownames(med_polish_resi_score) = 1:n_col
object = fts(1:dim(t(med_polish_resi_score))[1],t(med_polish_resi_score))
dum = farforecast(object = fts(1:dim(t(med_polish_resi_score))[1],t(med_polish_resi_score)), h = fh, Dmax_value = 10, Pmax_value = 5)
med_polish_resi_score_forecast = dum$point_fore$y
med_polish_resi_score_forecast
object = fts(1:dim(t(med_polish_resi_score))[1],t(med_polish_resi_score))
object$y
sd(object$y)
mean(object$y)
fh
