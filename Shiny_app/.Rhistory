trim_data <- function(data_frame,T){
#Take the first T time observations of the cross section
out <- c('data')
data <- list()
names <- names(data_frame)
for(i in 1:length(data_frame)){
data[[names[i]]] <- data_frame[[names[i]]][,1:T]
rownames(data[[names[i]]]) <- rownames(data_frame[[names[i]]])
colnames(data[[names[i]]]) <- colnames(data_frame[[names[i]]])[1:T]
}
return(mget(out))
}
order <- 3 #order of the Gao method
r <- 3 #number of factors as assumud by Gao et al. (we follow their paper's suggestion)
H <- seq(1,10) #For which horizons we want to predict.
p <- 9 #Number of functions in the functional basis
gender <- 'Female' #male or female mortality curves
test_size <- 16 #Number of samples in the test set
tmp <- init_data(p,gender) #loading the data
data_frames_raw <- tmp[[1]]  #raw data
path_Gaodata = './mortality data/data_Gao' #Where the Gao data are stored. To be adapted to local file system.
tmp <- init_data(p,gender) #loading the data
data_frames_raw <- tmp[[1]]  #raw data
dim(data_frames_raw)
length(data_frames_raw)
dim(data_frames_raw[[1]])
data_nozero <- tmp[[2]] #data where zero has been replaced
length(data_nozero)
data_frames_smooth <- tmp[[3]] #smoothed data
length(data_frames_smooth)
matplot(data_frames_raw[[1]],type="l")
matplot(data_frames_smooth[[1]],type="l")
data_frames_smooth_nozero <- tmp[[4]] #smoothed data where zeroes have been replaced prior to smoothing
mixed_fts <- tmp[[5]] #Smoothed data saved in our own defined format
length(mixed_fts)
mixed_fts
length(mixed_fts)
dim(mixed_fts)
length(mixed_fts[[1]])
fd <- tmp[[6]] #List of functional data. Every element is a functional time series
length(fd)
matplot(fd[[1]],type='l')
fd[[1]]
N <- length(data_nozero) #Number of samples
age_max <- dim(data_nozero[[1]])[1] #age max. Above that age, we average the mortality rates and create one age group
T <- dim(data_nozero[[1]])[2] #Sample size
start_time <- T-test_size #start time of the test set
end_time <- T-1 #end time of the training set
basis <- create.bspline.basis(c(0, 1), nbasis = p, norder = 4) #bspline basis
args <- seq(0, 1, length=age_max) #list of arguments at which the functions will be evaluated
model <- list()
training_set <- list()
years <-  sapply(colnames(data_frames_raw[[1]]),toString)
only_load=FALSE #If TRUE, will load GAO models as computed by a prior execution of the scripts (gain of time). Otherwise, we retrain the models.
if(!only_load){
for(t in start_time:end_time){ #41
training_set[[years[t]]] <- trim_data(data_frames_smooth_nozero,t)[[1]]
model[[years[t]]] <- hdfpca(training_set[[years[t]]], order, q = sqrt(dim(training_set[[years[t]]][[1]])[2]),r)
}
save(model,file=paste(path_saved_files,'/models_Gao_',gender,'_',version_code,'.Rdata',sep=""))
} else {
load(paste(path_saved_files,'/models_Gao_',gender,'_',version_code,'.Rdata',sep=""))
}
print('end of modeling for Gao')
predictions_GAO <- list()
predictions_NTH <- list()
for(h in 1:length(H)){
predictions_GAO[[h]] <- array(0,dim=c(N,test_size+1-H[h],age_max))
predictions_NTH[[h]] <- array(0,dim=c(N,test_size+1-H[h],age_max))
}
r_hat <- list()
cp <- list()
for(t in start_time:end_time){
cp[[years[t]]] <- mixed_fts$copy()
cp[[years[t]]]$trimSampleSize(t)
r_hat[[years[t]]] <-   est_r_abc(cp[[years[t]]],10)
print(paste('estimated r for year ',years[t],': ',r_hat[[years[t]]]))
}
for(h in 1:length(H)){
print(h)
for(t in start_time:(T-h)){ #42-h
predictions_NTH[[h]][,t+1-start_time,] <- predict_NTH_rknown_v2(cp[[years[t]]],H[h],p,basis,args,r_hat[[years[t]]])
}
}
for(t in start_time:end_time){
print(t)
tmp <- forecast.hdfpca(model[[years[t]]],h=max(H),B=1)
for(i in 1:N){
for(h in 1:min(length(H),end_time+1-t)){
if(max(H)==1){
predictions_GAO[[h]][i,t+1-start_time,] <- tmp$forecast[[i]]
} else {
predictions_GAO[[h]][i,t+1-start_time,] <- tmp$forecast[[i]][,H[h]]
}
}
}
}
error_GAO <- matrix(0,length(H),2)
error_NTH <- matrix(0,length(H),2)
error_GAO_log <- matrix(0,length(H),2)
error_NTH_log <- matrix(0,length(H),2)
for(h in 1:length(H)){
error_GAO[h,1] <- compute_forecast_error(data_nozero,predictions_GAO,H[h],"MSE",TRUE)
error_GAO[h,2] <- compute_forecast_error(data_nozero,predictions_GAO,H[h],"MASE",TRUE)
error_NTH[h,1] <- compute_forecast_error(data_nozero,predictions_NTH,H[h],"MSE",TRUE)
error_NTH[h,2] <- compute_forecast_error(data_nozero,predictions_NTH,H[h],"MASE",TRUE)
error_GAO_log[h,1] <- compute_forecast_error(data_nozero,predictions_GAO,H[h],"MSE",FALSE)
error_GAO_log[h,2] <- compute_forecast_error(data_nozero,predictions_GAO,H[h],"MASE",FALSE)
error_NTH_log[h,1] <- compute_forecast_error(data_nozero,predictions_NTH,H[h],"MSE",FALSE)
error_NTH_log[h,2] <- compute_forecast_error(data_nozero,predictions_NTH,H[h],"MASE",FALSE)
}
print('Gao')
print(error_GAO)
print('NTH')
print(error_NTH)
#print(str(predictions_NTH))
save(predictions_GAO,predictions_NTH,error_GAO,error_NTH,error_GAO_log,error_NTH_log,H,data_frames_raw,data_frames_smooth,mixed_fts,file=paste(path_saved_files,'/mortality_',gender,'_',version_code,'.Rdata',sep=""))
setwd("~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes")
setwd("~/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/TNH_code")
packages <- c("generics", "demography", "forecast","fda","fdaoutlier",
"rlist", "mrfDepth","ftsa","rainbow")
## Now load or install&load all
package_check <- lapply(
packages,
FUN <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
setwd("/Users/jimenecf/My Drive/Fall 2023/STAT 397/PhD project 4/Revisions from JCGS/Rcodes/")
################################################################################
# Dataset entries
################################################################################
dataset_entries<-readRDS("./Rcodes_paper/dataset_entries/USA/dataset_entries.rds")
year = dataset_entries[[1]]
n_year = dataset_entries[[2]]
age = dataset_entries[[3]]
n_age = dataset_entries[[4]]
n_prefectures=dataset_entries[[5]]
# Row partition
part_list = list()
for(ik in 1:n_prefectures) {
part_list[[ik]] = (n_year*ik-(n_year-1)):(n_year*ik)
}
#Column partition
n_populations=2
part_list_c = list()
for(ik in 1:n_populations) {
part_list_c[[ik]] = (n_age*ik-(n_age-1)):(n_age*ik)
}
################################################################################
# Datasets
################################################################################
# USA
names_states_USA <- readRDS("./Rcodes_paper/names_states/USA/names_states.rds")
USA_male <- readRDS("./Rcodes_paper/datasets/USA/USA_male.rds")
USA_female <- readRDS("./Rcodes_paper/datasets/USA/USA_female.rds")
all_male_USA<-t(list.cbind(USA_male))
all_female_USA<-t(list.cbind(USA_female))
length(USA_male)
order <- 3
r <- 3
H <- seq(1,10)
p <- 9
data_nozero <- USA_male
N <- length(data_nozero)
N
age_max <- dim(data_nozero[[1]])[1]
age_max
T <- dim(data_nozero[[1]])[2]
T
start_time <- T-test_size
order <- 3
r <- 3
H <- seq(1,10)
p <- 9
gender <- 'Male'
test_size <- 16
start_time <- T-test_size
start_time
T
test_size
end_time <- T-1
T-1
years <-  sapply(colnames(data_nozero[[1]]),toString)
years
path_saved_files
path_saved_files = './mortality data/results'
path_Gaodata = './data_Gao'
path_files = './mortality data/regions'
trim_data <- function(data_frame,T){
#Take the first T time observations of the cross section
out <- c('data')
data <- list()
names <- names(data_frame)
for(i in 1:length(data_frame)){
data[[names[i]]] <- data_frame[[names[i]]][,1:T]
rownames(data[[names[i]]]) <- rownames(data_frame[[names[i]]])
colnames(data[[names[i]]]) <- colnames(data_frame[[names[i]]])[1:T]
}
return(mget(out))
}
training_set <- list()
path_saved_files
year
years
only_load=TRUE
!only_load
paste(path_saved_files,'/models_Gao_',gender,'_',country,'.Rdata',sep="")
path_saved_files
paste(path_saved_files,'/models_Gao_',gender,'_',country,'.Rdata',sep="")
country = "USA"
paste(path_saved_files,'/models_Gao_',gender,'_',country,'.Rdata',sep="")
start_time
end_time
for(t in start_time:end_time){ #41
training_set[[years[t]]] <- trim_data(dataset,t)[[1]]
model[[years[t]]] <- hdfpca(training_set[[years[t]]], order, q = sqrt(dim(training_set[[years[t]]][[1]])[2]),r)
}
dataset <- USA_male
dataset <- USA_male
N <- length(dataset)
age_max <- dim(dataset[[1]])[1]
T <- dim(dataset[[1]])[2]
start_time <- T-test_size
end_time <- T-1
model <- list()
training_set <- list()
years <-  sapply(colnames(dataset[[1]]),toString)
for(t in start_time:end_time){ #41
training_set[[years[t]]] <- trim_data(dataset,t)[[1]]
model[[years[t]]] <- hdfpca(training_set[[years[t]]], order, q = sqrt(dim(training_set[[years[t]]][[1]])[2]),r)
}
start_time:end_time
test_size <- 10
start_time <- T-test_size
end_time <- T
start_time
end_time
start_time:end_time
t=52
years[t]]
years[t]
training_set[[years[t]]] <- trim_data(dataset,t)[[1]]
dim(training_set[[years[t]]])
length(training_set[[years[t]]])
dim(training_set[[years[t]]][[1]])
T <- dim(dataset[[1]])[2]
T
t
start_time:end_time
?forecast.hdfpca
n_year
i=1
pref=(n_year * i - (n_year - 1)):(n_year * i)
pref
k=1
pref[k:(n_year - max_h - 1 + k)]
max_h = 10
pref[k:(n_year - max_h - 1 + k)]
k=2
pref[k:(n_year - max_h - 1 + k)]
k=10
pref[k:(n_year - max_h - 1 + k)]
dim(all_male_USA)
data=all_male_USA
data=all_male_USA
order <- 3
r <- 3
i=1
pref=(n_year * i - (n_year - 1)):(n_year * i)
pref
forecasted_prefecture <- matrix(0, nrow = n_age * 2, ncol = max_h)
k=1
pref_k <- pref[k:(n_year - max_h - 1 + k)]
pref_k
dim(data[pref_k,])
order
dim(data)[2]
dim(data)[1]
sqrt(dim(data)[1])
r
#Train the model
model <- hdfpca(data[pref_k,], order, q = sqrt(dim(data)[1]),r)
dim(data[pref_k,])[1]
#Train the model
model <- hdfpca(data[pref_k,], order, q = sqrt(dim(data[pref_k,])[1]),r)
max_h
T=1
T:(T+(n_year-max_h-1)
T:T+n_year-max_h-1
T+n_year-max_h-1
T:T+n_year-max_h-1
T
(T:T+n_year-max_h-1)
T+n_year-max_h-1
1:10
T
T:T+n_year-max_h-1
T:(T+n_year-max_h-1)
T=2
T:(T+n_year-max_h-1)
T=10
T:(T+n_year-max_h-1)
data_frame <- USA_male
dim(data_frame)
length(data_frame)
dim(data_frame[[1]])
#Take the first T time observations of the cross section
out <- c('data')
out
data <- list()
names <- names(data_frame)
names
length(data_frame)
T=1
data[[names[i]]] <- data_frame[[names[i]]][,T:(T+n_year-max_h-1)]
i
dim(data[[names[i]]])
trim_data <- function(data_frame,T){
#Take the first T time observations of the cross section
out <- c('data')
data <- list()
names <- names(data_frame)
for(i in 1:length(data_frame)){
data[[names[i]]] <- data_frame[[names[i]]][,T:(T+n_year-max_h-1)]
rownames(data[[names[i]]]) <- rownames(data_frame[[names[i]]])
colnames(data[[names[i]]]) <- colnames(data_frame[[names[i]]])[T:(T+n_year-max_h-1)]
}
return(mget(out))
}
t=1
training_set[[years[t]]] <- trim_data(dataset,t)[[1]]
dim(training_set[[1]])
dataset <- USA_male
################################################################################
# Fit the data sets with the Gao 2019 approach rolling window
################################################################################
# Fit the model with hdfpca for the different datasets
model <- list()
for(t in 1:max_h){
training_set[[years[t]]] <- trim_data(dataset,t)[[1]]
model[[years[t]]] <- hdfpca(training_set[[years[t]]], order, q = sqrt(dim(training_set[[years[t]]][[1]])[2]),r)
}
save(model,file=paste(path_saved_files,'/model_Gao2019_',gender,'_',country,'.Rdata',sep=""))
saveRDS("model_gao.rds")
saveRDS(model,"model_gao.rds")
N
test_size
age_max
age
n_age
H
N
dim(array(0,dim=c(n_prefectures,max_h+1-1,n_age)))
mits
?mits
# auxiliary functions for the TNH method
source('./mortality data/codes/MITS_class.R')
source('./TNH_code/mortality data/codes/MITS_class.R')
Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
path_Gaodata
path_Gaodata = './TNH_code/data_Gao'
source('./TNH_code/mortality data/codes/MITS_class.R')
path_files = './TNH_code/mortality data/regions'
path_saved_files = './TNH_code/mortality data/results'
path_Gaodata = './TNH_code/data_Gao'
Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
path_Gaodata
path_Gaodata = './TNH_code/data_Gao/'
Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
paste(path_Gaodata,"data_GAO.Rdata",sep="/")
paste(path_Gaodata,"data_GAO.Rdata")
Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata"))
paste(path_Gaodata,"data_GAO.Rdata")
path_Gaodata = './TNH_code/data_Gao'
paste(path_Gaodata,"data_GAO.Rdata",sep="/")
Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
path_Gaodata = './TNH_code/mortality data/data_Gao'
paste(path_Gaodata,"data_GAO.Rdata",sep="/")
Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
dim( Gaodata)
length( Gaodata)
Gaodata
Gaodata[[1]]
length( Gaodata[[1]])
length(data1)
length(smooth.data)
dim(data1[[1]]$rate$female)[2]
data=USA_male
data1=data
N <- length(data)
N
out = c('data_frames_smooth_nozero','mixed_fts')
data_frames_smooth_nozero <- list()
mixed_fts <- mits$new()
age_max = dim(data1[[1]])[2]
age_max
dim(data1[[1]])
age_max = dim(data1[[1]])[1]
T = dim(data1[[1]])[2]
basis <- create.bspline.basis(c(0, 1), nbasis = p, norder = 4)
args <- seq(0, 1, length=age_max)
init_data <-  function(data,p,gender,Names){
# Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
NAMES = Names
data1=data
N <- length(data)
out = c('data1','mixed_fts')
mixed_fts <- mits$new()
age_max = dim(data1[[1]])[1]
T = dim(data1[[1]])[2]
basis <- create.bspline.basis(c(0, 1), nbasis = p, norder = 4)
args <- seq(0, 1, length=age_max)
data_list <- list()
fd<-list()
for(i in 1:N){
data_list[[i]] <- data1[[i]]
fd[[i]] <- Data2fd(args, data1[[i]], basis)
mixed_fts$loadFunc(fd[[i]])
}
mixed_fts$actualize()
names(fd) <- NAMES
names(data1) <- NAMES
return(mget(out))
}
init_data <-  function(data,p,Names){
# Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
NAMES = Names
data1=data
N <- length(data)
out = c('data1','mixed_fts')
mixed_fts <- mits$new()
age_max = dim(data1[[1]])[1]
T = dim(data1[[1]])[2]
basis <- create.bspline.basis(c(0, 1), nbasis = p, norder = 4)
args <- seq(0, 1, length=age_max)
data_list <- list()
fd<-list()
for(i in 1:N){
data_list[[i]] <- data1[[i]]
fd[[i]] <- Data2fd(args, data1[[i]], basis)
mixed_fts$loadFunc(fd[[i]])
}
mixed_fts$actualize()
names(fd) <- NAMES
names(data1) <- NAMES
return(mget(out))
}
trim_data <- function(data_frame,T){
#Take the first T time observations of the cross section
out <- c('data')
data <- list()
names <- names(data_frame)
for(i in 1:length(data_frame)){
data[[names[i]]] <- data_frame[[names[i]]][,T:(T+n_year-max_h-1)]
rownames(data[[names[i]]]) <- rownames(data_frame[[names[i]]])
colnames(data[[names[i]]]) <- colnames(data_frame[[names[i]]])[T:(T+n_year-max_h-1)]
}
return(mget(out))
}
################################################################################
# Datasets
################################################################################
# USA
names_states_USA <- readRDS("./Rcodes_paper/names_states/USA/names_states.rds")
Names <- names_states_USA
names_states_USA
Names <- as.vector(names_states_USA)
Names
data1_example <-init_data(data=USA_male ,p=9,Names=names_states_USA)
data1_example$data1
data1_example$mixed_fts
source("./aux_TNH.R")
source("./aux_TNH.R")
n_age
T <- dim(data_nozero[[1]])[2]
T
colnames(data1[[1]])
################################################################################
# Fit the data sets with the Gao 2019 approach rolling window
################################################################################
order <- 3
r <- 3
H <- seq(1,10)
p <- 9
test_size <- 16
tmp <- init_data_new(data=USA_male,p,Names=names_states_USA)
data1 <- tmp[[1]]
mixed_fts <- tmp[[2]]
N <- length(data1)
T <- dim(data1[[1]])[2]
T
N <- length(data1)
T <- n_year
T
# start_time <- T-test_size
# end_time <- T-1
basis <- create.bspline.basis(c(0, 1), nbasis = p, norder = 4)
args <- seq(0, 1, length=age_max)
model <- list()
training_set <- list()
years <-  sapply(colnames(data1[[1]]),toString)
years
model <- list()
for(t in 1:max_h){
training_set[[years[t]]] <- trim_data(dataset,t)[[1]]
model[[years[t]]] <- hdfpca(training_set[[years[t]]], order, q = sqrt(dim(training_set[[years[t]]][[1]])[2]),r)
}
Gaodata <- load(paste(path_Gaodata,"data_GAO.Rdata",sep="/"))
